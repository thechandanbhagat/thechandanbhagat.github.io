{
  "languages": [
    {
      "name": "JavaScript",
      "code": "// * Authentication: User login process\nfunction login(username, password) {\n  // Validate inputs\n  if (!username || !password) {\n    throw new Error('Username and password are required');\n  }\n  \n  // * Authentication: Hash password\n  const hashedPassword = hashPassword(password);\n  \n  // * Authentication: Check user credentials\n  return verifyUser(username, hashedPassword)\n    .then(userData => {\n      // * Session: Create user session\n      return createSession(userData);\n    });\n}",
      "highlighted": "<span class=\"code-comment\">// * Authentication: User login process</span>\n<span class=\"code-keyword\">function</span> login(username, password) {\n  <span class=\"code-comment\">// Validate inputs</span>\n  <span class=\"code-keyword\">if</span> (!username || !password) {\n    <span class=\"code-keyword\">throw new</span> Error(<span class=\"code-string\">'Username and password are required'</span>);\n  }\n  \n  <span class=\"code-comment\">// * Authentication: Hash password</span>\n  <span class=\"code-keyword\">const</span> hashedPassword = hashPassword(password);\n  \n  <span class=\"code-comment\">// * Authentication: Check user credentials</span>\n  <span class=\"code-keyword\">return</span> verifyUser(username, hashedPassword)\n    .then(userData => {\n      <span class=\"code-comment\">// * Session: Create user session</span>\n      <span class=\"code-keyword\">return</span> createSession(userData);\n    });\n}"
    },
    {
      "name": "TypeScript",
      "code": "// * Authentication: User login interface\ninterface LoginCredentials {\n  username: string;\n  password: string;\n}\n\n// * Authentication: Authentication service\nclass AuthService {\n  // * Authentication: User login method\n  public async login(credentials: LoginCredentials): Promise<User> {\n    const { username, password } = credentials;\n    \n    // * Security: Validate user input\n    this.validateLoginInput(username, password);\n    \n    // * Authentication: Call authentication API\n    const response = await this.api.post('/auth/login', credentials);\n    \n    // * Session: Store user token\n    this.tokenService.saveToken(response.token);\n    \n    return response.user;\n  }\n}",
      "highlighted": "<span class=\"code-comment\">// * Authentication: User login interface</span>\n<span class=\"code-keyword\">interface</span> LoginCredentials {\n  username: <span class=\"code-keyword\">string</span>;\n  password: <span class=\"code-keyword\">string</span>;\n}\n\n<span class=\"code-comment\">// * Authentication: Authentication service</span>\n<span class=\"code-keyword\">class</span> AuthService {\n  <span class=\"code-comment\">// * Authentication: User login method</span>\n  <span class=\"code-keyword\">public async</span> login(credentials: LoginCredentials): <span class=\"code-keyword\">Promise</span>&lt;User&gt; {\n    <span class=\"code-keyword\">const</span> { username, password } = credentials;\n    \n    <span class=\"code-comment\">// * Security: Validate user input</span>\n    <span class=\"code-keyword\">this</span>.validateLoginInput(username, password);\n    \n    <span class=\"code-comment\">// * Authentication: Call authentication API</span>\n    <span class=\"code-keyword\">const</span> response = <span class=\"code-keyword\">await this</span>.api.post(<span class=\"code-string\">'/auth/login'</span>, credentials);\n    \n    <span class=\"code-comment\">// * Session: Store user token</span>\n    <span class=\"code-keyword\">this</span>.tokenService.saveToken(response.token);\n    \n    <span class=\"code-keyword\">return</span> response.user;\n  }\n}"
    },
    {
      "name": "Python",
      "code": "# * Authentication: User authentication module\nimport hashlib\nimport jwt\nfrom datetime import datetime, timedelta\n\n# * Authentication: Password hashing function\ndef hash_password(password: str) -> str:\n    salt = os.environ.get('SALT_KEY')  # * Security: Get salt from environment\n    \n    # * Security: Hash password with SHA-256\n    hashed = hashlib.sha256((password + salt).encode()).hexdigest()\n    return hashed\n\n# * Authentication: User login\ndef authenticate_user(username: str, password: str):\n    # * Database: Fetch user from database\n    user = User.query.filter_by(username=username).first()\n    \n    if user and user.password == hash_password(password):\n        # * Session: Generate JWT token\n        return generate_token(user)\n    else:\n        return None",
      "highlighted": "<span class=\"code-comment\"># * Authentication: User authentication module</span>\n<span class=\"code-keyword\">import</span> hashlib\n<span class=\"code-keyword\">import</span> jwt\n<span class=\"code-keyword\">from</span> datetime <span class=\"code-keyword\">import</span> datetime, timedelta\n\n<span class=\"code-comment\"># * Authentication: Password hashing function</span>\n<span class=\"code-keyword\">def</span> hash_password(password: str) -> str:\n    salt = os.environ.get(<span class=\"code-string\">'SALT_KEY'</span>)  <span class=\"code-comment\"># * Security: Get salt from environment</span>\n    \n    <span class=\"code-comment\"># * Security: Hash password with SHA-256</span>\n    hashed = hashlib.sha256((password + salt).encode()).hexdigest()\n    <span class=\"code-keyword\">return</span> hashed\n\n<span class=\"code-comment\"># * Authentication: User login</span>\n<span class=\"code-keyword\">def</span> authenticate_user(username: str, password: str):\n    <span class=\"code-comment\"># * Database: Fetch user from database</span>\n    user = User.query.filter_by(username=username).first()\n    \n    <span class=\"code-keyword\">if</span> user <span class=\"code-keyword\">and</span> user.password == hash_password(password):\n        <span class=\"code-comment\"># * Session: Generate JWT token</span>\n        <span class=\"code-keyword\">return</span> generate_token(user)\n    <span class=\"code-keyword\">else</span>:\n        <span class=\"code-keyword\">return</span> None"
    },
    {
      "name": "Java",
      "code": "// * Authentication: User authentication service\npublic class AuthenticationService {\n    \n    private final UserRepository userRepository;\n    private final PasswordEncoder passwordEncoder;\n    private final JwtTokenProvider tokenProvider;\n    \n    // * Authentication: Authenticate user method\n    public AuthResponse authenticate(String username, String password) {\n        // * Security: Validate input\n        Objects.requireNonNull(username, \"Username cannot be null\");\n        Objects.requireNonNull(password, \"Password cannot be null\");\n        \n        // * Database: Get user from repository\n        User user = userRepository.findByUsername(username)\n            .orElseThrow(() -> new UsernameNotFoundException(\"User not found\"));\n        \n        // * Security: Check password match\n        if (!passwordEncoder.matches(password, user.getPassword())) {\n            throw new BadCredentialsException(\"Invalid password\");\n        }\n        \n        // * Session: Generate JWT token\n        String token = tokenProvider.generateToken(user);\n        \n        return new AuthResponse(token, user);\n    }\n}",
      "highlighted": "<span class=\"code-comment\">// * Authentication: User authentication service</span>\n<span class=\"code-keyword\">public class</span> AuthenticationService {\n    \n    <span class=\"code-keyword\">private final</span> UserRepository userRepository;\n    <span class=\"code-keyword\">private final</span> PasswordEncoder passwordEncoder;\n    <span class=\"code-keyword\">private final</span> JwtTokenProvider tokenProvider;\n    \n    <span class=\"code-comment\">// * Authentication: Authenticate user method</span>\n    <span class=\"code-keyword\">public</span> AuthResponse authenticate(<span class=\"code-keyword\">String</span> username, <span class=\"code-keyword\">String</span> password) {\n        <span class=\"code-comment\">// * Security: Validate input</span>\n        Objects.requireNonNull(username, <span class=\"code-string\">\"Username cannot be null\"</span>);\n        Objects.requireNonNull(password, <span class=\"code-string\">\"Password cannot be null\"</span>);\n        \n        <span class=\"code-comment\">// * Database: Get user from repository</span>\n        User user = userRepository.findByUsername(username)\n            .orElseThrow(() -> <span class=\"code-keyword\">new</span> UsernameNotFoundException(<span class=\"code-string\">\"User not found\"</span>));\n        \n        <span class=\"code-comment\">// * Security: Check password match</span>\n        <span class=\"code-keyword\">if</span> (!passwordEncoder.matches(password, user.getPassword())) {\n            <span class=\"code-keyword\">throw new</span> BadCredentialsException(<span class=\"code-string\">\"Invalid password\"</span>);\n        }\n        \n        <span class=\"code-comment\">// * Session: Generate JWT token</span>\n        <span class=\"code-keyword\">String</span> token = tokenProvider.generateToken(user);\n        \n        <span class=\"code-keyword\">return new</span> AuthResponse(token, user);\n    }\n}"
    },
    {
      "name": "C#",
      "code": "// * Authentication: User authentication service\npublic class AuthService : IAuthService\n{\n    private readonly UserManager<ApplicationUser> _userManager;\n    private readonly IJwtFactory _jwtFactory;\n    \n    // * Authentication: Constructor with dependency injection\n    public AuthService(UserManager<ApplicationUser> userManager, IJwtFactory jwtFactory)\n    {\n        _userManager = userManager;\n        _jwtFactory = jwtFactory;\n    }\n    \n    // * Authentication: Login method\n    public async Task<AuthResult> LoginAsync(string email, string password)\n    {\n        // * Security: Validate inputs\n        if (string.IsNullOrEmpty(email) || string.IsNullOrEmpty(password))\n        {\n            return new AuthResult { Success = false, Error = \"Email and password required\" };\n        }\n        \n        // * Database: Find user\n        var user = await _userManager.FindByEmailAsync(email);\n        \n        if (user == null)\n        {\n            return new AuthResult { Success = false, Error = \"User not found\" };\n        }\n        \n        // * Security: Check password\n        var passwordValid = await _userManager.CheckPasswordAsync(user, password);\n        \n        if (!passwordValid)\n        {\n            return new AuthResult { Success = false, Error = \"Invalid password\" };\n        }\n        \n        // * Session: Generate JWT token\n        var token = await _jwtFactory.GenerateTokenAsync(user);\n        \n        return new AuthResult { Success = true, Token = token };\n    }\n}",
      "highlighted": "<span class=\"code-comment\">// * Authentication: User authentication service</span>\n<span class=\"code-keyword\">public class</span> AuthService : IAuthService\n{\n    <span class=\"code-keyword\">private readonly</span> UserManager&lt;ApplicationUser&gt; _userManager;\n    <span class=\"code-keyword\">private readonly</span> IJwtFactory _jwtFactory;\n    \n    <span class=\"code-comment\">// * Authentication: Constructor with dependency injection</span>\n    <span class=\"code-keyword\">public</span> AuthService(UserManager&lt;ApplicationUser&gt; userManager, IJwtFactory jwtFactory)\n    {\n        _userManager = userManager;\n        _jwtFactory = jwtFactory;\n    }\n    \n    <span class=\"code-comment\">// * Authentication: Login method</span>\n    <span class=\"code-keyword\">public async</span> Task&lt;AuthResult&gt; LoginAsync(<span class=\"code-keyword\">string</span> email, <span class=\"code-keyword\">string</span> password)\n    {\n        <span class=\"code-comment\">// * Security: Validate inputs</span>\n        <span class=\"code-keyword\">if</span> (<span class=\"code-keyword\">string</span>.IsNullOrEmpty(email) || <span class=\"code-keyword\">string</span>.IsNullOrEmpty(password))\n        {\n            <span class=\"code-keyword\">return new</span> AuthResult { Success = <span class=\"code-keyword\">false</span>, Error = <span class=\"code-string\">\"Email and password required\"</span> };\n        }\n        \n        <span class=\"code-comment\">// * Database: Find user</span>\n        <span class=\"code-keyword\">var</span> user = <span class=\"code-keyword\">await</span> _userManager.FindByEmailAsync(email);\n        \n        <span class=\"code-keyword\">if</span> (user == <span class=\"code-keyword\">null</span>)\n        {\n            <span class=\"code-keyword\">return new</span> AuthResult { Success = <span class=\"code-keyword\">false</span>, Error = <span class=\"code-string\">\"User not found\"</span> };\n        }\n        \n        <span class=\"code-comment\">// * Security: Check password</span>\n        <span class=\"code-keyword\">var</span> passwordValid = <span class=\"code-keyword\">await</span> _userManager.CheckPasswordAsync(user, password);\n        \n        <span class=\"code-keyword\">if</span> (!passwordValid)\n        {\n            <span class=\"code-keyword\">return new</span> AuthResult { Success = <span class=\"code-keyword\">false</span>, Error = <span class=\"code-string\">\"Invalid password\"</span> };\n        }\n        \n        <span class=\"code-comment\">// * Session: Generate JWT token</span>\n        <span class=\"code-keyword\">var</span> token = <span class=\"code-keyword\">await</span> _jwtFactory.GenerateTokenAsync(user);\n        \n        <span class=\"code-keyword\">return new</span> AuthResult { Success = <span class=\"code-keyword\">true</span>, Token = token };\n    }\n}"
    },
    {
      "name": "HTML",
      "code": "<!-- * Authentication: Login form -->\n<form class=\"login-form\" id=\"login-form\">\n    <!-- * Authentication: Form title -->\n    <h2 class=\"form-title\">Account Login</h2>\n    \n    <!-- * Authentication: Username field -->\n    <div class=\"form-group\">\n        <label for=\"username\">Username</label>\n        <input type=\"text\" id=\"username\" name=\"username\" required>\n    </div>\n    \n    <!-- * Authentication: Password field -->\n    <div class=\"form-group\">\n        <label for=\"password\">Password</label>\n        <input type=\"password\" id=\"password\" name=\"password\" required>\n    </div>\n    \n    <!-- * Authentication: Remember me option -->\n    <div class=\"form-option\">\n        <input type=\"checkbox\" id=\"remember\" name=\"remember\">\n        <label for=\"remember\">Remember me</label>\n    </div>\n    \n    <!-- * Authentication: Submit button -->\n    <button type=\"submit\" class=\"btn-login\">Login</button>\n</form>",
      "highlighted": "<span class=\"code-comment\">&lt;!-- * Authentication: Login form --&gt;</span>\n&lt;<span class=\"code-keyword\">form</span> <span class=\"code-keyword\">class</span>=<span class=\"code-string\">\"login-form\"</span> id=<span class=\"code-string\">\"login-form\"</span>&gt;\n    <span class=\"code-comment\">&lt;!-- * Authentication: Form title --&gt;</span>\n    &lt;<span class=\"code-keyword\">h2</span> <span class=\"code-keyword\">class</span>=<span class=\"code-string\">\"form-title\"</span>&gt;Account Login&lt;/<span class=\"code-keyword\">h2</span>&gt;\n    \n    <span class=\"code-comment\">&lt;!-- * Authentication: Username field --&gt;</span>\n    &lt;<span class=\"code-keyword\">div</span> <span class=\"code-keyword\">class</span>=<span class=\"code-string\">\"form-group\"</span>&gt;\n        &lt;<span class=\"code-keyword\">label</span> <span class=\"code-keyword\">for</span>=<span class=\"code-string\">\"username\"</span>&gt;Username&lt;/<span class=\"code-keyword\">label</span>&gt;\n        &lt;<span class=\"code-keyword\">input</span> <span class=\"code-keyword\">type</span>=<span class=\"code-string\">\"text\"</span> id=<span class=\"code-string\">\"username\"</span> name=<span class=\"code-string\">\"username\"</span> required&gt;\n    &lt;/<span class=\"code-keyword\">div</span>&gt;\n    \n    <span class=\"code-comment\">&lt;!-- * Authentication: Password field --&gt;</span>\n    &lt;<span class=\"code-keyword\">div</span> <span class=\"code-keyword\">class</span>=<span class=\"code-string\">\"form-group\"</span>&gt;\n        &lt;<span class=\"code-keyword\">label</span> <span class=\"code-keyword\">for</span>=<span class=\"code-string\">\"password\"</span>&gt;Password&lt;/<span class=\"code-keyword\">label</span>&gt;\n        &lt;<span class=\"code-keyword\">input</span> <span class=\"code-keyword\">type</span>=<span class=\"code-string\">\"password\"</span> id=<span class=\"code-string\">\"password\"</span> name=<span class=\"code-string\">\"password\"</span> required&gt;\n    &lt;/<span class=\"code-keyword\">div</span>&gt;\n    \n    <span class=\"code-comment\">&lt;!-- * Authentication: Remember me option --&gt;</span>\n    &lt;<span class=\"code-keyword\">div</span> <span class=\"code-keyword\">class</span>=<span class=\"code-string\">\"form-option\"</span>&gt;\n        &lt;<span class=\"code-keyword\">input</span> <span class=\"code-keyword\">type</span>=<span class=\"code-string\">\"checkbox\"</span> id=<span class=\"code-string\">\"remember\"</span> name=<span class=\"code-string\">\"remember\"</span>&gt;\n        &lt;<span class=\"code-keyword\">label</span> <span class=\"code-keyword\">for</span>=<span class=\"code-string\">\"remember\"</span>&gt;Remember me&lt;/<span class=\"code-keyword\">label</span>&gt;\n    &lt;/<span class=\"code-keyword\">div</span>&gt;\n    \n    <span class=\"code-comment\">&lt;!-- * Authentication: Submit button --&gt;</span>\n    &lt;<span class=\"code-keyword\">button</span> <span class=\"code-keyword\">type</span>=<span class=\"code-string\">\"submit\"</span> <span class=\"code-keyword\">class</span>=<span class=\"code-string\">\"btn-login\"</span>&gt;Login&lt;/<span class=\"code-keyword\">button</span>&gt;\n&lt;/<span class=\"code-keyword\">form</span>&gt;"
    },
    {
      "name": "CSS",
      "code": "/* * Authentication: Login form styling */\n.login-form {\n    max-width: 400px;\n    margin: 0 auto;\n    padding: 2rem;\n    border-radius: 8px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    background-color: #ffffff;\n}\n\n/* * Authentication: Form title */\n.form-title {\n    margin-bottom: 1.5rem;\n    color: #333;\n    text-align: center;\n    font-size: 1.5rem;\n}\n\n/* * Authentication: Form fields */\n.form-group {\n    margin-bottom: 1rem;\n}\n\n.form-group label {\n    display: block;\n    margin-bottom: 0.5rem;\n    font-weight: 500;\n    color: #555;\n}\n\n.form-group input {\n    width: 100%;\n    padding: 0.75rem;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    font-size: 1rem;\n}\n\n/* * Authentication: Submit button */\n.btn-login {\n    display: block;\n    width: 100%;\n    padding: 0.75rem;\n    background: linear-gradient(135deg, #6366f1, #4f46e5);\n    color: white;\n    border: none;\n    border-radius: 4px;\n    font-size: 1rem;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n\n.btn-login:hover {\n    background: linear-gradient(135deg, #4f46e5, #4338ca);\n    transform: translateY(-2px);\n    box-shadow: 0 4px 12px rgba(79, 70, 229, 0.3);\n}",
      "highlighted": "<span class=\"code-comment\">/* * Authentication: Login form styling */</span>\n.<span class=\"code-keyword\">login-form</span> {\n    max-width: 400px;\n    margin: 0 auto;\n    padding: 2rem;\n    border-radius: 8px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    background-color: #ffffff;\n}\n\n<span class=\"code-comment\">/* * Authentication: Form title */</span>\n.<span class=\"code-keyword\">form-title</span> {\n    margin-bottom: 1.5rem;\n    color: #333;\n    text-align: center;\n    font-size: 1.5rem;\n}\n\n<span class=\"code-comment\">/* * Authentication: Form fields */</span>\n.<span class=\"code-keyword\">form-group</span> {\n    margin-bottom: 1rem;\n}\n\n.<span class=\"code-keyword\">form-group</span> label {\n    display: block;\n    margin-bottom: 0.5rem;\n    font-weight: 500;\n    color: #555;\n}\n\n.<span class=\"code-keyword\">form-group</span> input {\n    width: 100%;\n    padding: 0.75rem;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    font-size: 1rem;\n}\n\n<span class=\"code-comment\">/* * Authentication: Submit button */</span>\n.<span class=\"code-keyword\">btn-login</span> {\n    display: block;\n    width: 100%;\n    padding: 0.75rem;\n    background: linear-gradient(135deg, #6366f1, #4f46e5);\n    color: white;\n    border: none;\n    border-radius: 4px;\n    font-size: 1rem;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n\n.<span class=\"code-keyword\">btn-login</span>:hover {\n    background: linear-gradient(135deg, #4f46e5, #4338ca);\n    transform: translateY(-2px);\n    box-shadow: 0 4px 12px rgba(79, 70, 229, 0.3);\n}"
    },
    {
      "name": "Go",
      "code": "// * Authentication: User authentication package\npackage auth\n\nimport (\n    \"crypto/sha256\"\n    \"encoding/hex\"\n    \"errors\"\n    \"time\"\n    \n    \"github.com/golang-jwt/jwt/v4\"\n)\n\n// * Authentication: User login struct\ntype LoginRequest struct {\n    Username string `json:\"username\"`\n    Password string `json:\"password\"`\n}\n\n// * Authentication: Login handler\nfunc (s *Service) Login(req LoginRequest) (string, error) {\n    // * Security: Validate request\n    if req.Username == \"\" || req.Password == \"\" {\n        return \"\", errors.New(\"username and password required\")\n    }\n    \n    // * Security: Hash password\n    hashedPassword := hashPassword(req.Password)\n    \n    // * Database: Find user\n    user, err := s.userRepo.FindByUsername(req.Username)\n    if err != nil {\n        return \"\", errors.New(\"invalid credentials\")\n    }\n    \n    // * Security: Verify password\n    if user.Password != hashedPassword {\n        return \"\", errors.New(\"invalid credentials\")\n    }\n    \n    // * Session: Generate JWT token\n    token, err := generateToken(user.ID)\n    if err != nil {\n        return \"\", err\n    }\n    \n    return token, nil\n}",
      "highlighted": "<span class=\"code-comment\">// * Authentication: User authentication package</span>\n<span class=\"code-keyword\">package</span> auth\n\n<span class=\"code-keyword\">import</span> (\n    <span class=\"code-string\">\"crypto/sha256\"</span>\n    <span class=\"code-string\">\"encoding/hex\"</span>\n    <span class=\"code-string\">\"errors\"</span>\n    <span class=\"code-string\">\"time\"</span>\n    \n    <span class=\"code-string\">\"github.com/golang-jwt/jwt/v4\"</span>\n)\n\n<span class=\"code-comment\">// * Authentication: User login struct</span>\n<span class=\"code-keyword\">type</span> LoginRequest <span class=\"code-keyword\">struct</span> {\n    Username <span class=\"code-keyword\">string</span> `json:\"username\"`\n    Password <span class=\"code-keyword\">string</span> `json:\"password\"`\n}\n\n<span class=\"code-comment\">// * Authentication: Login handler</span>\n<span class=\"code-keyword\">func</span> (s *Service) Login(req LoginRequest) (<span class=\"code-keyword\">string</span>, <span class=\"code-keyword\">error</span>) {\n    <span class=\"code-comment\">// * Security: Validate request</span>\n    <span class=\"code-keyword\">if</span> req.Username == <span class=\"code-string\">\"\"</span> || req.Password == <span class=\"code-string\">\"\"</span> {\n        <span class=\"code-keyword\">return</span> <span class=\"code-string\">\"\"</span>, errors.New(<span class=\"code-string\">\"username and password required\"</span>)\n    }\n    \n    <span class=\"code-comment\">// * Security: Hash password</span>\n    hashedPassword := hashPassword(req.Password)\n    \n    <span class=\"code-comment\">// * Database: Find user</span>\n    user, err := s.userRepo.FindByUsername(req.Username)\n    <span class=\"code-keyword\">if</span> err != <span class=\"code-keyword\">nil</span> {\n        <span class=\"code-keyword\">return</span> <span class=\"code-string\">\"\"</span>, errors.New(<span class=\"code-string\">\"invalid credentials\"</span>)\n    }\n    \n    <span class=\"code-comment\">// * Security: Verify password</span>\n    <span class=\"code-keyword\">if</span> user.Password != hashedPassword {\n        <span class=\"code-keyword\">return</span> <span class=\"code-string\">\"\"</span>, errors.New(<span class=\"code-string\">\"invalid credentials\"</span>)\n    }\n    \n    <span class=\"code-comment\">// * Session: Generate JWT token</span>\n    token, err := generateToken(user.ID)\n    <span class=\"code-keyword\">if</span> err != <span class=\"code-keyword\">nil</span> {\n        <span class=\"code-keyword\">return</span> <span class=\"code-string\">\"\"</span>, err\n    }\n    \n    <span class=\"code-keyword\">return</span> token, <span class=\"code-keyword\">nil</span>\n}"
    },
    {
      "name": "Ruby",
      "code": "# * Authentication: User authentication module\nmodule Authentication\n  # * Authentication: Password hashing\n  def self.hash_password(password, salt = nil)\n    salt ||= SecureRandom.hex(16) # * Security: Generate salt if not provided\n    \n    # * Security: Use bcrypt for password hashing\n    hashed = BCrypt::Engine.hash_secret(password, salt)\n    \n    return { hashed: hashed, salt: salt }\n  end\n  \n  # * Authentication: Login method\n  def self.authenticate(username, password)\n    # * Database: Find user in database\n    user = User.find_by(username: username)\n    return nil unless user\n    \n    # * Security: Verify password\n    hashed_input = hash_password(password, user.salt)[:hashed]\n    return nil unless hashed_input == user.password_digest\n    \n    # * Session: Generate JWT token\n    token = generate_jwt_token(user)\n    \n    return { user: user, token: token }\n  end\n  \n  # * Session: JWT token generation\n  def self.generate_jwt_token(user)\n    # * Security: Set token expiration\n    exp = Time.now.to_i + 86400 # 24 hours\n    \n    payload = {\n      user_id: user.id,\n      username: user.username,\n      exp: exp\n    }\n    \n    JWT.encode(payload, ENV['JWT_SECRET'], 'HS256')\n  end\nend",
      "highlighted": "<span class=\"code-comment\"># * Authentication: User authentication module</span>\n<span class=\"code-keyword\">module</span> Authentication\n  <span class=\"code-comment\"># * Authentication: Password hashing</span>\n  <span class=\"code-keyword\">def</span> self.hash_password(password, salt = nil)\n    salt ||= SecureRandom.hex(16) <span class=\"code-comment\"># * Security: Generate salt if not provided</span>\n    \n    <span class=\"code-comment\"># * Security: Use bcrypt for password hashing</span>\n    hashed = BCrypt::Engine.hash_secret(password, salt)\n    \n    <span class=\"code-keyword\">return</span> { hashed: hashed, salt: salt }\n  <span class=\"code-keyword\">end</span>\n  \n  <span class=\"code-comment\"># * Authentication: Login method</span>\n  <span class=\"code-keyword\">def</span> self.authenticate(username, password)\n    <span class=\"code-comment\"># * Database: Find user in database</span>\n    user = User.find_by(username: username)\n    <span class=\"code-keyword\">return</span> nil <span class=\"code-keyword\">unless</span> user\n    \n    <span class=\"code-comment\"># * Security: Verify password</span>\n    hashed_input = hash_password(password, user.salt)[:hashed]\n    <span class=\"code-keyword\">return</span> nil <span class=\"code-keyword\">unless</span> hashed_input == user.password_digest\n    \n    <span class=\"code-comment\"># * Session: Generate JWT token</span>\n    token = generate_jwt_token(user)\n    \n    <span class=\"code-keyword\">return</span> { user: user, token: token }\n  <span class=\"code-keyword\">end</span>\n  \n  <span class=\"code-comment\"># * Session: JWT token generation</span>\n  <span class=\"code-keyword\">def</span> self.generate_jwt_token(user)\n    <span class=\"code-comment\"># * Security: Set token expiration</span>\n    exp = Time.now.to_i + 86400 <span class=\"code-comment\"># 24 hours</span>\n    \n    payload = {\n      user_id: user.id,\n      username: user.username,\n      exp: exp\n    }\n    \n    JWT.encode(payload, ENV[<span class=\"code-string\">'JWT_SECRET'</span>], <span class=\"code-string\">'HS256'</span>)\n  <span class=\"code-keyword\">end</span>\n<span class=\"code-keyword\">end</span>"
    },
    {
      "name": "PHP",
      "code": "<?php\n// * Authentication: User authentication class\nclass Authentication {\n    private $db;\n    private $sessionManager;\n    \n    public function __construct(Database $db, SessionManager $sessionManager) {\n        $this->db = $db;\n        $this->sessionManager = $sessionManager;\n    }\n    \n    // * Authentication: Login method\n    public function login(string $username, string $password): array {\n        // * Security: Validate input\n        if (empty($username) || empty($password)) {\n            return [\n                'success' => false,\n                'message' => 'Username and password are required'\n            ];\n        }\n        \n        // * Database: Find user\n        $user = $this->findUserByUsername($username);\n        \n        if (!$user) {\n            return [\n                'success' => false,\n                'message' => 'Invalid credentials'\n            ];\n        }\n        \n        // * Security: Verify password\n        if (!password_verify($password, $user['password_hash'])) {\n            return [\n                'success' => false,\n                'message' => 'Invalid credentials'\n            ];\n        }\n        \n        // * Session: Create user session\n        $this->sessionManager->createSession($user['id']);\n        \n        return [\n            'success' => true,\n            'user' => $user\n        ];\n    }\n    \n    // * Database: Find user by username\n    private function findUserByUsername(string $username) {\n        $statement = $this->db->prepare(\"SELECT * FROM users WHERE username = ?\");\n        $statement->bind_param(\"s\", $username);\n        $statement->execute();\n        \n        return $statement->get_result()->fetch_assoc();\n    }\n}",
      "highlighted": "<span class=\"code-comment\"><?php\n// * Authentication: User authentication class</span>\n<span class=\"code-keyword\">class</span> Authentication {\n    <span class=\"code-keyword\">private</span> $db;\n    <span class=\"code-keyword\">private</span> $sessionManager;\n    \n    <span class=\"code-keyword\">public function</span> __construct(Database $db, SessionManager $sessionManager) {\n        $<span class=\"code-keyword\">this</span>->db = $db;\n        $<span class=\"code-keyword\">this</span>->sessionManager = $sessionManager;\n    }\n    \n    <span class=\"code-comment\">// * Authentication: Login method</span>\n    <span class=\"code-keyword\">public function</span> login(<span class=\"code-keyword\">string</span> $username, <span class=\"code-keyword\">string</span> $password): <span class=\"code-keyword\">array</span> {\n        <span class=\"code-comment\">// * Security: Validate input</span>\n        <span class=\"code-keyword\">if</span> (empty($username) || empty($password)) {\n            <span class=\"code-keyword\">return</span> [\n                <span class=\"code-string\">'success'</span> => <span class=\"code-keyword\">false</span>,\n                <span class=\"code-string\">'message'</span> => <span class=\"code-string\">'Username and password are required'</span>\n            ];\n        }\n        \n        <span class=\"code-comment\">// * Database: Find user</span>\n        $user = $<span class=\"code-keyword\">this</span>->findUserByUsername($username);\n        \n        <span class=\"code-keyword\">if</span> (!$user) {\n            <span class=\"code-keyword\">return</span> [\n                <span class=\"code-string\">'success'</span> => <span class=\"code-keyword\">false</span>,\n                <span class=\"code-string\">'message'</span> => <span class=\"code-string\">'Invalid credentials'</span>\n            ];\n        }\n        \n        <span class=\"code-comment\">// * Security: Verify password</span>\n        <span class=\"code-keyword\">if</span> (!password_verify($password, $user[<span class=\"code-string\">'password_hash'</span>])) {\n            <span class=\"code-keyword\">return</span> [\n                <span class=\"code-string\">'success'</span> => <span class=\"code-keyword\">false</span>,\n                <span class=\"code-string\">'message'</span> => <span class=\"code-string\">'Invalid credentials'</span>\n            ];\n        }\n        \n        <span class=\"code-comment\">// * Session: Create user session</span>\n        $<span class=\"code-keyword\">this</span>->sessionManager->createSession($user[<span class=\"code-string\">'id'</span>]);\n        \n        <span class=\"code-keyword\">return</span> [\n            <span class=\"code-string\">'success'</span> => <span class=\"code-keyword\">true</span>,\n            <span class=\"code-string\">'user'</span> => $user\n        ];\n    }\n    \n    <span class=\"code-comment\">// * Database: Find user by username</span>\n    <span class=\"code-keyword\">private function</span> findUserByUsername(<span class=\"code-keyword\">string</span> $username) {\n        $statement = $<span class=\"code-keyword\">this</span>->db->prepare(<span class=\"code-string\">\"SELECT * FROM users WHERE username = ?\"</span>);\n        $statement->bind_param(<span class=\"code-string\">\"s\"</span>, $username);\n        $statement->execute();\n        \n        <span class=\"code-keyword\">return</span> $statement->get_result()->fetch_assoc();\n    }\n}"
    },
    {
      "name": "Swift",
      "code": "// * Authentication: User authentication manager\nclass AuthenticationManager {\n    private let networkService: NetworkService\n    private let secureStorage: SecureStorage\n    \n    init(networkService: NetworkService, secureStorage: SecureStorage) {\n        self.networkService = networkService\n        self.secureStorage = secureStorage\n    }\n    \n    // * Authentication: User login method\n    func login(username: String, password: String) async throws -> User {\n        // * Security: Validate inputs\n        guard !username.isEmpty, !password.isEmpty else {\n            throw AuthError.invalidCredentials(\"Username and password cannot be empty\")\n        }\n        \n        // * Security: Create request credentials\n        let credentials = LoginCredentials(username: username, password: password)\n        \n        // * API: Send authentication request\n        let response: AuthResponse = try await networkService.request(.login(credentials))\n        \n        // * Security: Store token securely\n        try secureStorage.save(token: response.token, forKey: .authToken)\n        \n        // * Session: Save user data\n        UserDefaults.standard.set(response.user.id, forKey: \"userId\")\n        \n        return response.user\n    }\n    \n    // * Session: Check if user is logged in\n    var isAuthenticated: Bool {\n        // * Security: Check if token exists and is valid\n        guard let token = try? secureStorage.getToken(forKey: .authToken) else {\n            return false\n        }\n        \n        return !isTokenExpired(token)\n    }\n    \n    // * Security: Validate token expiration\n    private func isTokenExpired(_ token: String) -> Bool {\n        // Token validation logic here\n        return false\n    }\n}",
      "highlighted": "<span class=\"code-comment\">// * Authentication: User authentication manager</span>\n<span class=\"code-keyword\">class</span> AuthenticationManager {\n    <span class=\"code-keyword\">private let</span> networkService: NetworkService\n    <span class=\"code-keyword\">private let</span> secureStorage: SecureStorage\n    \n    <span class=\"code-keyword\">init</span>(networkService: NetworkService, secureStorage: SecureStorage) {\n        <span class=\"code-keyword\">self</span>.networkService = networkService\n        <span class=\"code-keyword\">self</span>.secureStorage = secureStorage\n    }\n    \n    <span class=\"code-comment\">// * Authentication: User login method</span>\n    <span class=\"code-keyword\">func</span> login(username: String, password: String) <span class=\"code-keyword\">async throws</span> -> User {\n        <span class=\"code-comment\">// * Security: Validate inputs</span>\n        <span class=\"code-keyword\">guard</span> !username.isEmpty, !password.isEmpty <span class=\"code-keyword\">else</span> {\n            <span class=\"code-keyword\">throw</span> AuthError.invalidCredentials(<span class=\"code-string\">\"Username and password cannot be empty\"</span>)\n        }\n        \n        <span class=\"code-comment\">// * Security: Create request credentials</span>\n        <span class=\"code-keyword\">let</span> credentials = LoginCredentials(username: username, password: password)\n        \n        <span class=\"code-comment\">// * API: Send authentication request</span>\n        <span class=\"code-keyword\">let</span> response: AuthResponse = <span class=\"code-keyword\">try await</span> networkService.request(.login(credentials))\n        \n        <span class=\"code-comment\">// * Security: Store token securely</span>\n        <span class=\"code-keyword\">try</span> secureStorage.save(token: response.token, forKey: .authToken)\n        \n        <span class=\"code-comment\">// * Session: Save user data</span>\n        UserDefaults.standard.set(response.user.id, forKey: <span class=\"code-string\">\"userId\"</span>)\n        \n        <span class=\"code-keyword\">return</span> response.user\n    }\n    \n    <span class=\"code-comment\">// * Session: Check if user is logged in</span>\n    <span class=\"code-keyword\">var</span> isAuthenticated: Bool {\n        <span class=\"code-comment\">// * Security: Check if token exists and is valid</span>\n        <span class=\"code-keyword\">guard let</span> token = <span class=\"code-keyword\">try?</span> secureStorage.getToken(forKey: .authToken) <span class=\"code-keyword\">else</span> {\n            <span class=\"code-keyword\">return false</span>\n        }\n        \n        <span class=\"code-keyword\">return</span> !isTokenExpired(token)\n    }\n    \n    <span class=\"code-comment\">// * Security: Validate token expiration</span>\n    <span class=\"code-keyword\">private func</span> isTokenExpired(_ token: String) -> Bool {\n        <span class=\"code-comment\">// Token validation logic here</span>\n        <span class=\"code-keyword\">return false</span>\n    }\n}"
    },
    {
      "name": "SQL",
      "code": "-- * Authentication: Users table schema\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    salt VARCHAR(255) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    last_login TIMESTAMP,\n    is_active BOOLEAN DEFAULT TRUE\n);\n\n-- * Authentication: User roles table\nCREATE TABLE roles (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50) UNIQUE NOT NULL,\n    description TEXT\n);\n\n-- * Authentication: User-role mapping\nCREATE TABLE user_roles (\n    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,\n    role_id INTEGER REFERENCES roles(id) ON DELETE CASCADE,\n    PRIMARY KEY (user_id, role_id)\n);\n\n-- * Security: Session tokens table\nCREATE TABLE sessions (\n    id VARCHAR(255) PRIMARY KEY,\n    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n    token VARCHAR(255) NOT NULL,\n    expires_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    ip_address VARCHAR(45),\n    user_agent TEXT\n);\n\n-- * Database: Find user by username\nCREATE OR REPLACE FUNCTION find_user_by_username(p_username VARCHAR)\nRETURNS TABLE (id INTEGER, username VARCHAR, password_hash VARCHAR, salt VARCHAR, is_active BOOLEAN) AS $$\nBEGIN\n    RETURN QUERY\n    SELECT u.id, u.username, u.password_hash, u.salt, u.is_active\n    FROM users u\n    WHERE u.username = p_username;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- * Authentication: Update last login timestamp\nCREATE OR REPLACE FUNCTION update_last_login(p_user_id INTEGER)\nRETURNS VOID AS $$\nBEGIN\n    UPDATE users\n    SET last_login = CURRENT_TIMESTAMP\n    WHERE id = p_user_id;\nEND;\n$$ LANGUAGE plpgsql;",
      "highlighted": "<span class=\"code-comment\">-- * Authentication: Users table schema</span>\n<span class=\"code-keyword\">CREATE TABLE</span> users (\n    id <span class=\"code-keyword\">SERIAL PRIMARY KEY</span>,\n    username <span class=\"code-keyword\">VARCHAR</span>(50) <span class=\"code-keyword\">UNIQUE NOT NULL</span>,\n    email <span class=\"code-keyword\">VARCHAR</span>(100) <span class=\"code-keyword\">UNIQUE NOT NULL</span>,\n    password_hash <span class=\"code-keyword\">VARCHAR</span>(255) <span class=\"code-keyword\">NOT NULL</span>,\n    salt <span class=\"code-keyword\">VARCHAR</span>(255) <span class=\"code-keyword\">NOT NULL</span>,\n    created_at <span class=\"code-keyword\">TIMESTAMP DEFAULT CURRENT_TIMESTAMP</span>,\n    last_login <span class=\"code-keyword\">TIMESTAMP</span>,\n    is_active <span class=\"code-keyword\">BOOLEAN DEFAULT TRUE</span>\n);\n\n<span class=\"code-comment\">-- * Authentication: User roles table</span>\n<span class=\"code-keyword\">CREATE TABLE</span> roles (\n    id <span class=\"code-keyword\">SERIAL PRIMARY KEY</span>,\n    name <span class=\"code-keyword\">VARCHAR</span>(50) <span class=\"code-keyword\">UNIQUE NOT NULL</span>,\n    description <span class=\"code-keyword\">TEXT</span>\n);\n\n<span class=\"code-comment\">-- * Authentication: User-role mapping</span>\n<span class=\"code-keyword\">CREATE TABLE</span> user_roles (\n    user_id <span class=\"code-keyword\">INTEGER REFERENCES</span> users(id) <span class=\"code-keyword\">ON DELETE CASCADE</span>,\n    role_id <span class=\"code-keyword\">INTEGER REFERENCES</span> roles(id) <span class=\"code-keyword\">ON DELETE CASCADE</span>,\n    <span class=\"code-keyword\">PRIMARY KEY</span> (user_id, role_id)\n);\n\n<span class=\"code-comment\">-- * Security: Session tokens table</span>\n<span class=\"code-keyword\">CREATE TABLE</span> sessions (\n    id <span class=\"code-keyword\">VARCHAR</span>(255) <span class=\"code-keyword\">PRIMARY KEY</span>,\n    user_id <span class=\"code-keyword\">INTEGER NOT NULL REFERENCES</span> users(id) <span class=\"code-keyword\">ON DELETE CASCADE</span>,\n    token <span class=\"code-keyword\">VARCHAR</span>(255) <span class=\"code-keyword\">NOT NULL</span>,\n    expires_at <span class=\"code-keyword\">TIMESTAMP NOT NULL</span>,\n    created_at <span class=\"code-keyword\">TIMESTAMP DEFAULT CURRENT_TIMESTAMP</span>,\n    ip_address <span class=\"code-keyword\">VARCHAR</span>(45),\n    user_agent <span class=\"code-keyword\">TEXT</span>\n);\n\n<span class=\"code-comment\">-- * Database: Find user by username</span>\n<span class=\"code-keyword\">CREATE OR REPLACE FUNCTION</span> find_user_by_username(p_username <span class=\"code-keyword\">VARCHAR</span>)\n<span class=\"code-keyword\">RETURNS TABLE</span> (id <span class=\"code-keyword\">INTEGER</span>, username <span class=\"code-keyword\">VARCHAR</span>, password_hash <span class=\"code-keyword\">VARCHAR</span>, salt <span class=\"code-keyword\">VARCHAR</span>, is_active <span class=\"code-keyword\">BOOLEAN</span>) <span class=\"code-keyword\">AS</span> $$\n<span class=\"code-keyword\">BEGIN</span>\n    <span class=\"code-keyword\">RETURN QUERY</span>\n    <span class=\"code-keyword\">SELECT</span> u.id, u.username, u.password_hash, u.salt, u.is_active\n    <span class=\"code-keyword\">FROM</span> users u\n    <span class=\"code-keyword\">WHERE</span> u.username = p_username;\n<span class=\"code-keyword\">END</span>;\n$$ <span class=\"code-keyword\">LANGUAGE</span> plpgsql;\n\n<span class=\"code-comment\">-- * Authentication: Update last login timestamp</span>\n<span class=\"code-keyword\">CREATE OR REPLACE FUNCTION</span> update_last_login(p_user_id <span class=\"code-keyword\">INTEGER</span>)\n<span class=\"code-keyword\">RETURNS VOID AS</span> $$\n<span class=\"code-keyword\">BEGIN</span>\n    <span class=\"code-keyword\">UPDATE</span> users\n    <span class=\"code-keyword\">SET</span> last_login = <span class=\"code-keyword\">CURRENT_TIMESTAMP</span>\n    <span class=\"code-keyword\">WHERE</span> id = p_user_id;\n<span class=\"code-keyword\">END</span>;\n$$ <span class=\"code-keyword\">LANGUAGE</span> plpgsql;"
    },
    {
      "name": "Rust",
      "code": "// * Authentication: Authentication module\nuse argon2::{self, Config};\nuse jwt::{encode, Header, EncodingKey};\nuse serde::{Deserialize, Serialize};\nuse chrono::{Utc, Duration};\n\n// * Authentication: User login request struct\n#[derive(Debug, Serialize, Deserialize)]\npub struct LoginRequest {\n    pub username: String,\n    pub password: String,\n}\n\n// * Authentication: User login response struct\n#[derive(Debug, Serialize)]\npub struct LoginResponse {\n    pub token: String,\n    pub user: User,\n}\n\n// * Authentication: Authentication service\npub struct AuthService {\n    user_repository: UserRepository,\n    config: AuthConfig,\n}\n\nimpl AuthService {\n    pub fn new(user_repository: UserRepository, config: AuthConfig) -> Self {\n        Self { user_repository, config }\n    }\n    \n    // * Authentication: Login method\n    pub async fn login(&self, request: LoginRequest) -> Result<LoginResponse, AuthError> {\n        // * Security: Validate request\n        if request.username.is_empty() || request.password.is_empty() {\n            return Err(AuthError::InvalidCredentials);\n        }\n        \n        // * Database: Find user\n        let user = self.user_repository.find_by_username(&request.username).await\n            .map_err(|_| AuthError::InvalidCredentials)?;\n        \n        // * Security: Verify password\n        let is_valid = self.verify_password(&request.password, &user.password_hash)?;\n        \n        if !is_valid {\n            return Err(AuthError::InvalidCredentials);\n        }\n        \n        // * Session: Generate JWT token\n        let token = self.generate_token(&user)?;\n        \n        Ok(LoginResponse { token, user })\n    }\n    \n    // * Security: Verify password\n    fn verify_password(&self, password: &str, hash: &str) -> Result<bool, AuthError> {\n        argon2::verify_encoded(hash, password.as_bytes())\n            .map_err(|_| AuthError::InternalError)\n    }\n    \n    // * Session: Generate JWT token\n    fn generate_token(&self, user: &User) -> Result<String, AuthError> {\n        let expiration = Utc::now()\n            .checked_add_signed(Duration::hours(24))\n            .expect(\"Invalid timestamp\")\n            .timestamp();\n        \n        let claims = Claims {\n            sub: user.id.to_string(),\n            exp: expiration as usize,\n            username: user.username.clone(),\n        };\n        \n        encode(\n            &Header::default(),\n            &claims,\n            &EncodingKey::from_secret(self.config.jwt_secret.as_bytes()),\n        )\n        .map_err(|_| AuthError::InternalError)\n    }\n}",
      "highlighted": "<span class=\"code-comment\">// * Authentication: Authentication module</span>\n<span class=\"code-keyword\">use</span> argon2::{self, Config};\n<span class=\"code-keyword\">use</span> jwt::{encode, Header, EncodingKey};\n<span class=\"code-keyword\">use</span> serde::{Deserialize, Serialize};\n<span class=\"code-keyword\">use</span> chrono::{Utc, Duration};\n\n<span class=\"code-comment\">// * Authentication: User login request struct</span>\n#[<span class=\"code-keyword\">derive</span>(Debug, Serialize, Deserialize)]\n<span class=\"code-keyword\">pub struct</span> LoginRequest {\n    <span class=\"code-keyword\">pub</span> username: String,\n    <span class=\"code-keyword\">pub</span> password: String,\n}\n\n<span class=\"code-comment\">// * Authentication: User login response struct</span>\n#[<span class=\"code-keyword\">derive</span>(Debug, Serialize)]\n<span class=\"code-keyword\">pub struct</span> LoginResponse {\n    <span class=\"code-keyword\">pub</span> token: String,\n    <span class=\"code-keyword\">pub</span> user: User,\n}\n\n<span class=\"code-comment\">// * Authentication: Authentication service</span>\n<span class=\"code-keyword\">pub struct</span> AuthService {\n    user_repository: UserRepository,\n    config: AuthConfig,\n}\n\n<span class=\"code-keyword\">impl</span> AuthService {\n    <span class=\"code-keyword\">pub fn</span> new(user_repository: UserRepository, config: AuthConfig) -> Self {\n        Self { user_repository, config }\n    }\n    \n    <span class=\"code-comment\">// * Authentication: Login method</span>\n    <span class=\"code-keyword\">pub async fn</span> login(&self, request: LoginRequest) -> Result&lt;LoginResponse, AuthError&gt; {\n        <span class=\"code-comment\">// * Security: Validate request</span>\n        <span class=\"code-keyword\">if</span> request.username.is_empty() || request.password.is_empty() {\n            <span class=\"code-keyword\">return</span> Err(AuthError::InvalidCredentials);\n        }\n        \n        <span class=\"code-comment\">// * Database: Find user</span>\n        <span class=\"code-keyword\">let</span> user = self.user_repository.find_by_username(&request.username).await\n            .map_err(|_| AuthError::InvalidCredentials)?;\n        \n        <span class=\"code-comment\">// * Security: Verify password</span>\n        <span class=\"code-keyword\">let</span> is_valid = self.verify_password(&request.password, &user.password_hash)?;\n        \n        <span class=\"code-keyword\">if</span> !is_valid {\n            <span class=\"code-keyword\">return</span> Err(AuthError::InvalidCredentials);\n        }\n        \n        <span class=\"code-comment\">// * Session: Generate JWT token</span>\n        <span class=\"code-keyword\">let</span> token = self.generate_token(&user)?;\n        \n        Ok(LoginResponse { token, user })\n    }\n    \n    <span class=\"code-comment\">// * Security: Verify password</span>\n    <span class=\"code-keyword\">fn</span> verify_password(&self, password: &str, hash: &str) -> Result&lt;bool, AuthError&gt; {\n        argon2::verify_encoded(hash, password.as_bytes())\n            .map_err(|_| AuthError::InternalError)\n    }\n    \n    <span class=\"code-comment\">// * Session: Generate JWT token</span>\n    <span class=\"code-keyword\">fn</span> generate_token(&self, user: &User) -> Result&lt;String, AuthError&gt; {\n        <span class=\"code-keyword\">let</span> expiration = Utc::now()\n            .checked_add_signed(Duration::hours(24))\n            .expect(<span class=\"code-string\">\"Invalid timestamp\"</span>)\n            .timestamp();\n        \n        <span class=\"code-keyword\">let</span> claims = Claims {\n            sub: user.id.to_string(),\n            exp: expiration as usize,\n            username: user.username.clone(),\n        };\n        \n        encode(\n            &Header::default(),\n            &claims,\n            &EncodingKey::from_secret(self.config.jwt_secret.as_bytes()),\n        )\n        .map_err(|_| AuthError::InternalError)\n    }\n}"
    },
    {
      "name": "C++",
      "code": "// * Authentication: User authentication class\nclass AuthenticationManager {\nprivate:\n    DatabaseConnection* db;\n    SessionManager* sessionManager;\n    \n    // * Security: Password hashing function\n    std::string hashPassword(const std::string& password, const std::string& salt) const {\n        // Implementation using a secure hash algorithm\n        std::string combined = password + salt;\n        return sha256(combined);\n    }\n\npublic:\n    AuthenticationManager(DatabaseConnection* db, SessionManager* session) \n        : db(db), sessionManager(session) {}\n    \n    // * Authentication: User login method\n    AuthResult login(const std::string& username, const std::string& password) {\n        // * Security: Input validation\n        if (username.empty() || password.empty()) {\n            return AuthResult{false, \"Username and password are required\", nullptr};\n        }\n        \n        // * Database: Find user by username\n        User* user = db->findUserByUsername(username);\n        if (!user) {\n            return AuthResult{false, \"Invalid credentials\", nullptr};\n        }\n        \n        // * Security: Verify password\n        std::string hashedInput = hashPassword(password, user->getSalt());\n        if (hashedInput != user->getPasswordHash()) {\n            return AuthResult{false, \"Invalid credentials\", nullptr};\n        }\n        \n        // * Session: Create user session\n        std::string token = sessionManager->createSession(user->getId());\n        \n        return AuthResult{true, \"\", user, token};\n    }\n};",
      "highlighted": "<span class=\"code-comment\">// * Authentication: User authentication class</span>\n<span class=\"code-keyword\">class</span> AuthenticationManager {\n<span class=\"code-keyword\">private</span>:\n    DatabaseConnection* db;\n    SessionManager* sessionManager;\n    \n    <span class=\"code-comment\">// * Security: Password hashing function</span>\n    <span class=\"code-keyword\">std::string</span> hashPassword(<span class=\"code-keyword\">const std::string</span>& password, <span class=\"code-keyword\">const std::string</span>& salt) <span class=\"code-keyword\">const</span> {\n        <span class=\"code-comment\">// Implementation using a secure hash algorithm</span>\n        <span class=\"code-keyword\">std::string</span> combined = password + salt;\n        <span class=\"code-keyword\">return</span> sha256(combined);\n    }\n\n<span class=\"code-keyword\">public</span>:\n    AuthenticationManager(DatabaseConnection* db, SessionManager* session) \n        : db(db), sessionManager(session) {}\n    \n    <span class=\"code-comment\">// * Authentication: User login method</span>\n    AuthResult login(<span class=\"code-keyword\">const std::string</span>& username, <span class=\"code-keyword\">const std::string</span>& password) {\n        <span class=\"code-comment\">// * Security: Input validation</span>\n        <span class=\"code-keyword\">if</span> (username.empty() || password.empty()) {\n            <span class=\"code-keyword\">return</span> AuthResult{<span class=\"code-keyword\">false</span>, <span class=\"code-string\">\"Username and password are required\"</span>, <span class=\"code-keyword\">nullptr</span>};\n        }\n        \n        <span class=\"code-comment\">// * Database: Find user by username</span>\n        User* user = db->findUserByUsername(username);\n        <span class=\"code-keyword\">if</span> (!user) {\n            <span class=\"code-keyword\">return</span> AuthResult{<span class=\"code-keyword\">false</span>, <span class=\"code-string\">\"Invalid credentials\"</span>, <span class=\"code-keyword\">nullptr</span>};\n        }\n        \n        <span class=\"code-comment\">// * Security: Verify password</span>\n        <span class=\"code-keyword\">std::string</span> hashedInput = hashPassword(password, user->getSalt());\n        <span class=\"code-keyword\">if</span> (hashedInput != user->getPasswordHash()) {\n            <span class=\"code-keyword\">return</span> AuthResult{<span class=\"code-keyword\">false</span>, <span class=\"code-string\">\"Invalid credentials\"</span>, <span class=\"code-keyword\">nullptr</span>};\n        }\n        \n        <span class=\"code-comment\">// * Session: Create user session</span>\n        <span class=\"code-keyword\">std::string</span> token = sessionManager->createSession(user->getId());\n        \n        <span class=\"code-keyword\">return</span> AuthResult{<span class=\"code-keyword\">true</span>, <span class=\"code-string\">\"\"</span>, user, token};\n    }\n};"
    },
    {
      "name": "SCSS",
      "code": "/* * Authentication: Login form styling */\n$primary-color: #4f46e5;\n$secondary-color: #6366f1;\n$border-radius: 8px;\n\n@mixin card-shadow {\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n@mixin flex-center {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.login-form {\n    @include card-shadow;\n    max-width: 400px;\n    margin: 0 auto;\n    padding: 2rem;\n    border-radius: $border-radius;\n    background-color: white;\n    \n    .form-title {\n        text-align: center;\n        color: darken($primary-color, 10%);\n        margin-bottom: 1.5rem;\n    }\n    \n    .form-group {\n        margin-bottom: 1rem;\n        \n        label {\n            display: block;\n            margin-bottom: 0.5rem;\n            font-weight: 500;\n        }\n        \n        input {\n            width: 100%;\n            padding: 0.75rem;\n            border: 1px solid lighten($primary-color, 30%);\n            border-radius: $border-radius;\n            \n            &:focus {\n                outline: none;\n                border-color: $primary-color;\n                box-shadow: 0 0 0 2px rgba($primary-color, 0.2);\n            }\n        }\n    }\n    \n    .btn-login {\n        @include flex-center;\n        width: 100%;\n        padding: 0.75rem;\n        background: linear-gradient(135deg, $secondary-color, $primary-color);\n        color: white;\n        border: none;\n        border-radius: $border-radius;\n        font-weight: 600;\n        cursor: pointer;\n        transition: all 0.3s ease;\n        \n        &:hover {\n            background: linear-gradient(135deg, darken($secondary-color, 5%), darken($primary-color, 5%));\n            transform: translateY(-2px);\n        }\n    }\n}",
      "highlighted": "/* Authentication styling with SCSS features */"
    },
    {
      "name": "Vue",
      "code": "<!-- * Authentication: Login component -->\n<template>\n  <div class=\"login-container\">\n    <form @submit.prevent=\"handleLogin\" class=\"login-form\">\n      <h2>{{ title }}</h2>\n      \n      <div class=\"form-group\">\n        <label for=\"username\">Username</label>\n        <input\n          v-model=\"credentials.username\"\n          :class=\"{ 'error': errors.username }\"\n          type=\"text\"\n          id=\"username\"\n          required\n        >\n        <span v-if=\"errors.username\" class=\"error-text\">{{ errors.username }}</span>\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"password\">Password</label>\n        <input\n          v-model=\"credentials.password\"\n          :class=\"{ 'error': errors.password }\"\n          type=\"password\"\n          id=\"password\"\n          required\n        >\n        <span v-if=\"errors.password\" class=\"error-text\">{{ errors.password }}</span>\n      </div>\n      \n      <button :disabled=\"isLoading\" type=\"submit\" class=\"btn-login\">\n        {{ isLoading ? 'Logging in...' : 'Login' }}\n      </button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive } from 'vue'\nimport { useAuth } from '@/composables/useAuth'\n\nexport default {\n  name: 'LoginForm',\n  \n  setup() {\n    const { login } = useAuth()\n    const title = ref('Welcome Back')\n    const isLoading = ref(false)\n    \n    const credentials = reactive({\n      username: '',\n      password: ''\n    })\n    \n    const errors = reactive({\n      username: '',\n      password: ''\n    })\n    \n    const validateForm = () => {\n      let isValid = true\n      errors.username = ''\n      errors.password = ''\n      \n      if (!credentials.username) {\n        errors.username = 'Username is required'\n        isValid = false\n      }\n      \n      if (!credentials.password) {\n        errors.password = 'Password is required'\n        isValid = false\n      }\n      \n      return isValid\n    }\n    \n    const handleLogin = async () => {\n      if (!validateForm()) return\n      \n      isLoading.value = true\n      \n      try {\n        await login(credentials)\n        // Redirect or handle successful login\n      } catch (error) {\n        errors.password = 'Invalid credentials'\n      } finally {\n        isLoading.value = false\n      }\n    }\n    \n    return {\n      title,\n      credentials,\n      errors,\n      isLoading,\n      handleLogin\n    }\n  }\n}\n</script>",
      "highlighted": "<!-- Vue component template and logic -->"
    },
    {
      "name": "JSX",
      "code": "// * Authentication: Login component with React\nimport React, { useState } from 'react';\nimport { useAuth } from '../hooks/useAuth';\n\nconst LoginForm = () => {\n  const { login } = useAuth();\n  const [credentials, setCredentials] = useState({\n    username: '',\n    password: ''\n  });\n  const [errors, setErrors] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setCredentials(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  \n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!credentials.username) {\n      newErrors.username = 'Username is required';\n    }\n    \n    if (!credentials.password) {\n      newErrors.password = 'Password is required';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!validateForm()) return;\n    \n    setIsLoading(true);\n    \n    try {\n      await login(credentials);\n      // Handle successful login\n    } catch (error) {\n      setErrors({ submit: 'Invalid credentials' });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  return (\n    <div className=\"login-container\">\n      <form onSubmit={handleSubmit} className=\"login-form\">\n        <h2>Welcome Back</h2>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"username\">Username</label>\n          <input\n            type=\"text\"\n            id=\"username\"\n            name=\"username\"\n            value={credentials.username}\n            onChange={handleChange}\n            className={errors.username ? 'error' : ''}\n          />\n          {errors.username && (\n            <span className=\"error-text\">{errors.username}</span>\n          )}\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            name=\"password\"\n            value={credentials.password}\n            onChange={handleChange}\n            className={errors.password ? 'error' : ''}\n          />\n          {errors.password && (\n            <span className=\"error-text\">{errors.password}</span>\n          )}\n        </div>\n        \n        {errors.submit && (\n          <div className=\"error-message\">{errors.submit}</div>\n        )}\n        \n        <button\n          type=\"submit\"\n          className=\"btn-login\"\n          disabled={isLoading}\n        >\n          {isLoading ? 'Logging in...' : 'Login'}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default LoginForm;",
      "highlighted": "// React JSX component"
    },
    {
      "name": "XML",
      "code": "<!-- * Authentication: User authentication schema -->\n<xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n  <!-- * Authentication: User type definition -->\n  <xsd:complexType name=\"UserType\">\n    <xsd:sequence>\n      <xsd:element name=\"username\" type=\"xsd:string\"/>\n      <xsd:element name=\"email\" type=\"xsd:string\"/>\n      <!-- * Security: Password element -->\n      <xsd:element name=\"password\" type=\"xsd:string\"/>\n      <!-- * Security: Salt for password hashing -->\n      <xsd:element name=\"salt\" type=\"xsd:string\"/>\n      <!-- * Authentication: User roles -->\n      <xsd:element name=\"roles\">\n        <xsd:complexType>\n          <xsd:sequence>\n            <xsd:element name=\"role\" type=\"xsd:string\" maxOccurs=\"unbounded\"/>\n          </xsd:sequence>\n        </xsd:complexType>\n      </xsd:element>\n    </xsd:sequence>\n    <xsd:attribute name=\"id\" type=\"xsd:integer\" use=\"required\"/>\n    <xsd:attribute name=\"active\" type=\"xsd:boolean\" default=\"true\"/>\n  </xsd:complexType>\n  \n  <!-- * Session: Session token type -->\n  <xsd:complexType name=\"SessionType\">\n    <xsd:sequence>\n      <xsd:element name=\"token\" type=\"xsd:string\"/>\n      <xsd:element name=\"expires\" type=\"xsd:dateTime\"/>\n      <xsd:element name=\"userId\" type=\"xsd:integer\"/>\n    </xsd:sequence>\n    <xsd:attribute name=\"id\" type=\"xsd:string\" use=\"required\"/>\n  </xsd:complexType>\n</xsd:schema>",
      "highlighted": "<span class=\"code-comment\">&lt;!-- * Authentication: User authentication schema --&gt;</span>\n&lt;<span class=\"code-keyword\">xsd:schema</span> xmlns:xsd=<span class=\"code-string\">\"http://www.w3.org/2001/XMLSchema\"</span>&gt;\n  <span class=\"code-comment\">&lt;!-- * Authentication: User type definition --&gt;</span>\n  &lt;<span class=\"code-keyword\">xsd:complexType</span> name=<span class=\"code-string\">\"UserType\"</span>&gt;\n    &lt;<span class=\"code-keyword\">xsd:sequence</span>&gt;\n      &lt;<span class=\"code-keyword\">xsd:element</span> name=<span class=\"code-string\">\"username\"</span> type=<span class=\"code-string\">\"xsd:string\"</span>/&gt;\n      &lt;<span class=\"code-keyword\">xsd:element</span> name=<span class=\"code-string\">\"email\"</span> type=<span class=\"code-string\">\"xsd:string\"</span>/&gt;\n      <span class=\"code-comment\">&lt;!-- * Security: Password element --&gt;</span>\n      &lt;<span class=\"code-keyword\">xsd:element</span> name=<span class=\"code-string\">\"password\"</span> type=<span class=\"code-string\">\"xsd:string\"</span>/&gt;\n      <span class=\"code-comment\">&lt;!-- * Security: Salt for password hashing --&gt;</span>\n      &lt;<span class=\"code-keyword\">xsd:element</span> name=<span class=\"code-string\">\"salt\"</span> type=<span class=\"code-string\">\"xsd:string\"</span>/&gt;\n      <span class=\"code-comment\">&lt;!-- * Authentication: User roles --&gt;</span>\n      &lt;<span class=\"code-keyword\">xsd:element</span> name=<span class=\"code-string\">\"roles\"</span>&gt;\n        &lt;<span class=\"code-keyword\">xsd:complexType</span>&gt;\n          &lt;<span class=\"code-keyword\">xsd:sequence</span>&gt;\n            &lt;<span class=\"code-keyword\">xsd:element</span> name=<span class=\"code-string\">\"role\"</span> type=<span class=\"code-string\">\"xsd:string\"</span> maxOccurs=<span class=\"code-string\">\"unbounded\"</span>/&gt;\n          &lt;/<span class=\"code-keyword\">xsd:sequence</span>&gt;\n        &lt;/<span class=\"code-keyword\">xsd:complexType</span>&gt;\n      &lt;/<span class=\"code-keyword\">xsd:element</span>&gt;\n    &lt;/<span class=\"code-keyword\">xsd:sequence</span>&gt;\n    &lt;<span class=\"code-keyword\">xsd:attribute</span> name=<span class=\"code-string\">\"id\"</span> type=<span class=\"code-string\">\"xsd:integer\"</span> use=<span class=\"code-string\">\"required\"</span>/&gt;\n    &lt;<span class=\"code-keyword\">xsd:attribute</span> name=<span class=\"code-string\">\"active\"</span> type=<span class=\"code-string\">\"xsd:boolean\"</span> default=<span class=\"code-string\">\"true\"</span>/&gt;\n  &lt;/<span class=\"code-keyword\">xsd:complexType</span>&gt;\n  \n  <span class=\"code-comment\">&lt;!-- * Session: Session token type --&gt;</span>\n  &lt;<span class=\"code-keyword\">xsd:complexType</span> name=<span class=\"code-string\">\"SessionType\"</span>&gt;\n    &lt;<span class=\"code-keyword\">xsd:sequence</span>&gt;\n      &lt;<span class=\"code-keyword\">xsd:element</span> name=<span class=\"code-string\">\"token\"</span> type=<span class=\"code-string\">\"xsd:string\"</span>/&gt;\n      &lt;<span class=\"code-keyword\">xsd:element</span> name=<span class=\"code-string\">\"expires\"</span> type=<span class=\"code-string\">\"xsd:dateTime\"</span>/&gt;\n      &lt;<span class=\"code-keyword\">xsd:element</span> name=<span class=\"code-string\">\"userId\"</span> type=<span class=\"code-string\">\"xsd:integer\"</span>/&gt;\n    &lt;/<span class=\"code-keyword\">xsd:sequence</span>&gt;\n    &lt;<span class=\"code-keyword\">xsd:attribute</span> name=<span class=\"code-string\">\"id\"</span> type=<span class=\"code-string\">\"xsd:string\"</span> use=<span class=\"code-string\">\"required\"</span>/&gt;\n  &lt;/<span class=\"code-keyword\">xsd:complexType</span>&gt;\n&lt;/<span class=\"code-keyword\">xsd:schema</span>&gt;"
    },
    {
      "name": "XML (SAML)",
      "code": "<!-- * Authentication: SAML Authentication Response -->\n<samlp:Response xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\"\n               xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\"\n               ID=\"_8e8dc5f69a98cc4c1ff3427e5ce34606fd672f91e6\"\n               Version=\"2.0\"\n               IssueInstant=\"2023-07-17T16:23:10Z\"\n               Destination=\"https://example.com/auth/saml/callback\"\n               InResponseTo=\"_3c828ea096bb41785968\">\n    \n    <!-- * Authentication: SAML Issuer Information -->\n    <saml:Issuer>https://idp.example.org/SAML2</saml:Issuer>\n    \n    <!-- * Security: SAML Signature -->\n    <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">...</ds:Signature>\n    \n    <!-- * Authentication: Status of the request -->\n    <samlp:Status>\n        <samlp:StatusCode Value=\"urn:oasis:names:tc:SAML:2.0:status:Success\"/>\n    </samlp:Status>\n    \n    <!-- * Authentication: SAML Assertion -->\n    <saml:Assertion xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                    xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n                    ID=\"_d71a3a8e9fcc45c9e9d248ef7049393fc8f04e5f75\"\n                    Version=\"2.0\"\n                    IssueInstant=\"2023-07-17T16:23:10Z\">\n        <saml:Issuer>https://idp.example.org/SAML2</saml:Issuer>\n        \n        <!-- * Security: Subject being authenticated -->\n        <saml:Subject>\n            <saml:NameID Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\">user@example.com</saml:NameID>\n            <saml:SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\">\n                <saml:SubjectConfirmationData InResponseTo=\"_3c828ea096bb41785968\"\n                                           Recipient=\"https://example.com/auth/saml/callback\"\n                                           NotOnOrAfter=\"2023-07-17T16:28:10Z\"/>\n            </saml:SubjectConfirmation>\n        </saml:Subject>\n        \n        <!-- * Session: Authentication statement -->\n        <saml:AuthnStatement AuthnInstant=\"2023-07-17T16:22:00Z\"\n                          SessionIndex=\"_be9967abd904ddcae3c0eb4189adbe3f71e327cf93\">\n            <saml:AuthnContext>\n                <saml:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml:AuthnContextClassRef>\n            </saml:AuthnContext>\n        </saml:AuthnStatement>\n        \n        <!-- * Authentication: User attributes -->\n        <saml:AttributeStatement>\n            <saml:Attribute Name=\"uid\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\">\n                <saml:AttributeValue xsi:type=\"xs:string\">12345</saml:AttributeValue>\n            </saml:Attribute>\n            <saml:Attribute Name=\"email\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\">\n                <saml:AttributeValue xsi:type=\"xs:string\">user@example.com</saml:AttributeValue>\n            </saml:Attribute>\n        </saml:AttributeStatement>\n    </saml:Assertion>\n</samlp:Response>",
      "highlighted": "<span class=\"code-comment\">&lt;!-- * Authentication: SAML Authentication Response --&gt;</span>\n&lt;<span class=\"code-keyword\">samlp:Response</span> xmlns:samlp=<span class=\"code-string\">\"urn:oasis:names:tc:SAML:2.0:protocol\"</span>\n               xmlns:saml=<span class=\"code-string\">\"urn:oasis:names:tc:SAML:2.0:assertion\"</span>\n               ID=<span class=\"code-string\">\"_8e8dc5f69a98cc4c1ff3427e5ce34606fd672f91e6\"</span>\n               Version=<span class=\"code-string\">\"2.0\"</span>\n               IssueInstant=<span class=\"code-string\">\"2023-07-17T16:23:10Z\"</span>\n               Destination=<span class=\"code-string\">\"https://example.com/auth/saml/callback\"</span>\n               InResponseTo=<span class=\"code-string\">\"_3c828ea096bb41785968\"</span>&gt;\n    \n    <span class=\"code-comment\">&lt;!-- * Authentication: SAML Issuer Information --&gt;</span>\n    &lt;<span class=\"code-keyword\">saml:Issuer</span>&gt;https://idp.example.org/SAML2&lt;/<span class=\"code-keyword\">saml:Issuer</span>&gt;\n    \n    <span class=\"code-comment\">&lt;!-- * Security: SAML Signature --&gt;</span>\n    &lt;<span class=\"code-keyword\">ds:Signature</span> xmlns:ds=<span class=\"code-string\">\"http://www.w3.org/2000/09/xmldsig#\"</span>&gt;...&lt;/<span class=\"code-keyword\">ds:Signature</span>&gt;\n    \n    <span class=\"code-comment\">&lt;!-- * Authentication: Status of the request --&gt;</span>\n    &lt;<span class=\"code-keyword\">samlp:Status</span>&gt;\n        &lt;<span class=\"code-keyword\">samlp:StatusCode</span> Value=<span class=\"code-string\">\"urn:oasis:names:tc:SAML:2.0:status:Success\"</span>/&gt;\n    &lt;/<span class=\"code-keyword\">samlp:Status</span>&gt;\n    \n    <span class=\"code-comment\">&lt;!-- * Authentication: SAML Assertion --&gt;</span>\n    &lt;<span class=\"code-keyword\">saml:Assertion</span> xmlns:xsi=<span class=\"code-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n                    xmlns:xs=<span class=\"code-string\">\"http://www.w3.org/2001/XMLSchema\"</span>\n                    ID=<span class=\"code-string\">\"_d71a3a8e9fcc45c9e9d248ef7049393fc8f04e5f75\"</span>\n                    Version=<span class=\"code-string\">\"2.0\"</span>\n                    IssueInstant=<span class=\"code-string\">\"2023-07-17T16:23:10Z\"</span>&gt;\n        &lt;<span class=\"code-keyword\">saml:Issuer</span>&gt;https://idp.example.org/SAML2&lt;/<span class=\"code-keyword\">saml:Issuer</span>&gt;\n        \n        <span class=\"code-comment\">&lt;!-- * Security: Subject being authenticated --&gt;</span>\n        &lt;<span class=\"code-keyword\">saml:Subject</span>&gt;\n            &lt;<span class=\"code-keyword\">saml:NameID</span> Format=<span class=\"code-string\">\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"</span>&gt;user@example.com&lt;/<span class=\"code-keyword\">saml:NameID</span>&gt;\n            &lt;<span class=\"code-keyword\">saml:SubjectConfirmation</span> Method=<span class=\"code-string\">\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"</span>&gt;\n                &lt;<span class=\"code-keyword\">saml:SubjectConfirmationData</span> InResponseTo=<span class=\"code-string\">\"_3c828ea096bb41785968\"</span>\n                                           Recipient=<span class=\"code-string\">\"https://example.com/auth/saml/callback\"</span>\n                                           NotOnOrAfter=<span class=\"code-string\">\"2023-07-17T16:28:10Z\"</span>/&gt;\n            &lt;/<span class=\"code-keyword\">saml:SubjectConfirmation</span>&gt;\n        &lt;/<span class=\"code-keyword\">saml:Subject</span>&gt;\n        \n        <span class=\"code-comment\">&lt;!-- * Session: Authentication statement --&gt;</span>\n        &lt;<span class=\"code-keyword\">saml:AuthnStatement</span> AuthnInstant=<span class=\"code-string\">\"2023-07-17T16:22:00Z\"</span>\n                          SessionIndex=<span class=\"code-string\">\"_be9967abd904ddcae3c0eb4189adbe3f71e327cf93\"</span>&gt;\n            &lt;<span class=\"code-keyword\">saml:AuthnContext</span>&gt;\n                &lt;<span class=\"code-keyword\">saml:AuthnContextClassRef</span>&gt;urn:oasis:names:tc:SAML:2.0:ac:classes:Password&lt;/<span class=\"code-keyword\">saml:AuthnContextClassRef</span>&gt;\n            &lt;/<span class=\"code-keyword\">saml:AuthnContext</span>&gt;\n        &lt;/<span class=\"code-keyword\">saml:AuthnStatement</span>&gt;\n        \n        <span class=\"code-comment\">&lt;!-- * Authentication: User attributes --&gt;</span>\n        &lt;<span class=\"code-keyword\">saml:AttributeStatement</span>&gt;\n            &lt;<span class=\"code-keyword\">saml:Attribute</span> Name=<span class=\"code-string\">\"uid\"</span> NameFormat=<span class=\"code-string\">\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\"</span>&gt;\n                &lt;<span class=\"code-keyword\">saml:AttributeValue</span> xsi:type=<span class=\"code-string\">\"xs:string\"</span>&gt;12345&lt;/<span class=\"code-keyword\">saml:AttributeValue</span>&gt;\n            &lt;/<span class=\"code-keyword\">saml:Attribute</span>&gt;\n            &lt;<span class=\"code-keyword\">saml:Attribute</span> Name=<span class=\"code-string\">\"email\"</span> NameFormat=<span class=\"code-string\">\"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\"</span>&gt;\n                &lt;<span class=\"code-keyword\">saml:AttributeValue</span> xsi:type=<span class=\"code-string\">\"xs:string\"</span>&gt;user@example.com&lt;/<span class=\"code-keyword\">saml:AttributeValue</span>&gt;\n            &lt;/<span class=\"code-keyword\">saml:Attribute</span>&gt;\n        &lt;/<span class=\"code-keyword\">saml:AttributeStatement</span>&gt;\n    &lt;/<span class=\"code-keyword\">saml:Assertion</span>&gt;\n&lt;/<span class=\"code-keyword\">samlp:Response</span>&gt;"
    },
    {
      "name": "Objective-C",
      "code": "// * Authentication: User authentication manager\n@interface AuthenticationManager : NSObject\n\n@property (nonatomic, strong) UserRepository *userRepository;\n@property (nonatomic, strong) KeychainManager *keychainManager;\n\n- (instancetype)initWithRepository:(UserRepository *)repository\n                 keychainManager:(KeychainManager *)keychainManager;\n\n// * Authentication: User login method\n- (void)loginWithUsername:(NSString *)username\n                password:(NSString *)password\n              completion:(void (^)(User *user, NSError *error))completion;\n\n// * Security: Password hashing\n- (NSString *)hashPassword:(NSString *)password withSalt:(NSString *)salt;\n\n@end\n\n@implementation AuthenticationManager\n\n- (instancetype)initWithRepository:(UserRepository *)repository\n                 keychainManager:(KeychainManager *)keychainManager {\n    self = [super init];\n    if (self) {\n        _userRepository = repository;\n        _keychainManager = keychainManager;\n    }\n    return self;\n}\n\n// * Authentication: User login implementation\n- (void)loginWithUsername:(NSString *)username\n                password:(NSString *)password\n              completion:(void (^)(User *user, NSError *error))completion {\n    // * Security: Validate inputs\n    if (username.length == 0 || password.length == 0) {\n        NSError *error = [NSError errorWithDomain:@\"AuthenticationErrorDomain\"\n                                            code:1001\n                                        userInfo:@{NSLocalizedDescriptionKey: @\"Username and password are required\"}];\n        completion(nil, error);\n        return;\n    }\n    \n    // * Database: Find user by username\n    [self.userRepository findUserByUsername:username completion:^(User *user, NSError *error) {\n        if (error || !user) {\n            NSError *authError = [NSError errorWithDomain:@\"AuthenticationErrorDomain\"\n                                                   code:1002\n                                               userInfo:@{NSLocalizedDescriptionKey: @\"Invalid credentials\"}];\n            completion(nil, authError);\n            return;\n        }\n        \n        // * Security: Verify password\n        NSString *hashedPassword = [self hashPassword:password withSalt:user.salt];\n        if (![hashedPassword isEqualToString:user.passwordHash]) {\n            NSError *authError = [NSError errorWithDomain:@\"AuthenticationErrorDomain\"\n                                                   code:1002\n                                               userInfo:@{NSLocalizedDescriptionKey: @\"Invalid credentials\"}];\n            completion(nil, authError);\n            return;\n        }\n        \n        // * Session: Generate authentication token\n        NSString *token = [self generateTokenForUser:user];\n        \n        // * Security: Store token in keychain\n        [self.keychainManager storeAuthToken:token forUser:user.userId];\n        \n        // * Session: Update last login date\n        user.lastLoginDate = [NSDate date];\n        [self.userRepository updateUser:user completion:^(BOOL success, NSError *updateError) {\n            completion(user, nil);\n        }];\n    }];\n}\n\n// * Security: Password hashing implementation\n- (NSString *)hashPassword:(NSString *)password withSalt:(NSString *)salt {\n    // Combine password and salt\n    NSString *combined = [NSString stringWithFormat:@\"%@%@\", password, salt];\n    \n    // Create SHA-256 hash\n    NSData *data = [combined dataUsingEncoding:NSUTF8StringEncoding];\n    uint8_t digest[CC_SHA256_DIGEST_LENGTH];\n    CC_SHA256(data.bytes, (CC_LONG)data.length, digest);\n    \n    // Convert to hex string\n    NSMutableString *output = [NSMutableString stringWithCapacity:CC_SHA256_DIGEST_LENGTH * 2];\n    for (int i = 0; i < CC_SHA256_DIGEST_LENGTH; i++) {\n        [output appendFormat:@\"%02x\", digest[i]];\n    }\n    \n    return output;\n}\n\n// * Session: Token generation\n- (NSString *)generateTokenForUser:(User *)user {\n    // Generate JWT or custom token\n    // Implementation would go here\n    return @\"sample-token\";\n}\n\n@end",
      "highlighted": "<span class=\"code-comment\">// * Authentication: User authentication manager</span>\n<span class=\"code-keyword\">@interface</span> AuthenticationManager : NSObject\n\n<span class=\"code-keyword\">@property</span> (nonatomic, strong) UserRepository *userRepository;\n<span class=\"code-keyword\">@property</span> (nonatomic, strong) KeychainManager *keychainManager;\n\n- (instancetype)initWithRepository:(UserRepository *)repository\n                 keychainManager:(KeychainManager *)keychainManager;\n\n<span class=\"code-comment\">// * Authentication: User login method</span>\n- (<span class=\"code-keyword\">void</span>)loginWithUsername:(<span class=\"code-keyword\">NSString</span> *)username\n                password:(<span class=\"code-keyword\">NSString</span> *)password\n              completion:(<span class=\"code-keyword\">void</span> (^)(User *user, <span class=\"code-keyword\">NSError</span> *error))completion;\n\n<span class=\"code-comment\">// * Security: Password hashing</span>\n- (<span class=\"code-keyword\">NSString</span> *)hashPassword:(<span class=\"code-keyword\">NSString</span> *)password withSalt:(<span class=\"code-keyword\">NSString</span> *)salt;\n\n<span class=\"code-keyword\">@end</span>\n\n<span class=\"code-keyword\">@implementation</span> AuthenticationManager\n\n- (instancetype)initWithRepository:(UserRepository *)repository\n                 keychainManager:(KeychainManager *)keychainManager {\n    <span class=\"code-keyword\">self</span> = [<span class=\"code-keyword\">super</span> init];\n    <span class=\"code-keyword\">if</span> (<span class=\"code-keyword\">self</span>) {\n        _userRepository = repository;\n        _keychainManager = keychainManager;\n    }\n    <span class=\"code-keyword\">return</span> <span class=\"code-keyword\">self</span>;\n}\n\n<span class=\"code-comment\">// * Authentication: User login implementation</span>\n- (<span class=\"code-keyword\">void</span>)loginWithUsername:(<span class=\"code-keyword\">NSString</span> *)username\n                password:(<span class=\"code-keyword\">NSString</span> *)password\n              completion:(<span class=\"code-keyword\">void</span> (^)(User *user, <span class=\"code-keyword\">NSError</span> *error))completion {\n    <span class=\"code-comment\">// * Security: Validate inputs</span>\n    <span class=\"code-keyword\">if</span> (username.length == 0 || password.length == 0) {\n        <span class=\"code-keyword\">NSError</span> *error = [<span class=\"code-keyword\">NSError</span> errorWithDomain:<span class=\"code-string\">@\"AuthenticationErrorDomain\"</span>\n                                            code:1001\n                                        userInfo:@{<span class=\"code-keyword\">NSLocalizedDescriptionKey</span>: <span class=\"code-string\">@\"Username and password are required\"</span>}];\n        completion(nil, error);\n        <span class=\"code-keyword\">return</span>;\n    }\n    \n    <span class=\"code-comment\">// * Database: Find user by username</span>\n    [<span class=\"code-keyword\">self</span>.userRepository findUserByUsername:username completion:^(User *user, <span class=\"code-keyword\">NSError</span> *error) {\n        <span class=\"code-keyword\">if</span> (error || !user) {\n            <span class=\"code-keyword\">NSError</span> *authError = [<span class=\"code-keyword\">NSError</span> errorWithDomain:<span class=\"code-string\">@\"AuthenticationErrorDomain\"</span>\n                                                   code:1002\n                                               userInfo:@{<span class=\"code-keyword\">NSLocalizedDescriptionKey</span>: <span class=\"code-string\">@\"Invalid credentials\"</span>}];\n            completion(nil, authError);\n            <span class=\"code-keyword\">return</span>;\n        }\n        \n        <span class=\"code-comment\">// * Security: Verify password</span>\n        <span class=\"code-keyword\">NSString</span> *hashedPassword = [<span class=\"code-keyword\">self</span> hashPassword:password withSalt:user.salt];\n        <span class=\"code-keyword\">if</span> (![hashedPassword isEqualToString:user.passwordHash]) {\n            <span class=\"code-keyword\">NSError</span> *authError = [<span class=\"code-keyword\">NSError</span> errorWithDomain:<span class=\"code-string\">@\"AuthenticationErrorDomain\"</span>\n                                                   code:1002\n                                               userInfo:@{<span class=\"code-keyword\">NSLocalizedDescriptionKey</span>: <span class=\"code-string\">@\"Invalid credentials\"</span>}];\n            completion(nil, authError);\n            <span class=\"code-keyword\">return</span>;\n        }\n        \n        <span class=\"code-comment\">// * Session: Generate authentication token</span>\n        <span class=\"code-keyword\">NSString</span> *token = [<span class=\"code-keyword\">self</span> generateTokenForUser:user];\n        \n        <span class=\"code-comment\">// * Security: Store token in keychain</span>\n        [<span class=\"code-keyword\">self</span>.keychainManager storeAuthToken:token forUser:user.userId];\n        \n        <span class=\"code-comment\">// * Session: Update last login date</span>\n        user.lastLoginDate = [<span class=\"code-keyword\">NSDate</span> date];\n        [<span class=\"code-keyword\">self</span>.userRepository updateUser:user completion:^(<span class=\"code-keyword\">BOOL</span> success, <span class=\"code-keyword\">NSError</span> *updateError) {\n            completion(user, nil);\n        }];\n    }];\n}\n\n<span class=\"code-comment\">// * Security: Password hashing implementation</span>\n- (<span class=\"code-keyword\">NSString</span> *)hashPassword:(<span class=\"code-keyword\">NSString</span> *)password withSalt:(<span class=\"code-keyword\">NSString</span> *)salt {\n    <span class=\"code-comment\">// Combine password and salt</span>\n    <span class=\"code-keyword\">NSString</span> *combined = [<span class=\"code-keyword\">NSString</span> stringWithFormat:<span class=\"code-string\">@\"%@%@\"</span>, password, salt];\n    \n    <span class=\"code-comment\">// Create SHA-256 hash</span>\n    <span class=\"code-keyword\">NSData</span> *data = [combined dataUsingEncoding:<span class=\"code-keyword\">NSUTF8StringEncoding</span>];\n    uint8_t digest[CC_SHA256_DIGEST_LENGTH];\n    CC_SHA256(data.bytes, (CC_LONG)data.length, digest);\n    \n    <span class=\"code-comment\">// Convert to hex string</span>\n    <span class=\"code-keyword\">NSMutableString</span> *output = [<span class=\"code-keyword\">NSMutableString</span> stringWithCapacity:CC_SHA256_DIGEST_LENGTH * 2];\n    <span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">int</span> i = 0; i < CC_SHA256_DIGEST_LENGTH; i++) {\n        [output appendFormat:<span class=\"code-string\">@\"%02x\"</span>, digest[i]];\n    }\n    \n    <span class=\"code-keyword\">return</span> output;\n}\n\n<span class=\"code-comment\">// * Session: Token generation</span>\n- (<span class=\"code-keyword\">NSString</span> *)generateTokenForUser:(User *)user {\n    <span class=\"code-comment\">// Generate JWT or custom token</span>\n    <span class=\"code-comment\">// Implementation would go here</span>\n    <span class=\"code-keyword\">return</span> <span class=\"code-string\">@\"sample-token\"</span>;\n}\n\n<span class=\"code-keyword\">@end</span>"
    },
    {
      "name": "Kotlin",
      "code": "// * Authentication: Authentication service class\nclass AuthenticationService(\n    private val userRepository: UserRepository,\n    private val passwordEncoder: PasswordEncoder,\n    private val jwtTokenProvider: JwtTokenProvider\n) {\n    \n    // * Authentication: User login method\n    suspend fun login(credentials: LoginRequest): AuthResponse {\n        // * Security: Validate input\n        require(credentials.username.isNotBlank()) { \"Username cannot be empty\" }\n        require(credentials.password.isNotBlank()) { \"Password cannot be empty\" }\n        \n        // * Database: Find user by username\n        val user = userRepository.findByUsername(credentials.username)\n            ?: throw AuthenticationException(\"Invalid credentials\")\n        \n        // * Security: Verify password\n        if (!passwordEncoder.matches(credentials.password, user.passwordHash)) {\n            throw AuthenticationException(\"Invalid credentials\")\n        }\n        \n        // * Security: Check account status\n        if (!user.isActive) {\n            throw AuthenticationException(\"Account is disabled\")\n        }\n        \n        // * Session: Generate JWT token\n        val token = jwtTokenProvider.createToken(user.id, user.roles)\n        \n        // * Database: Update last login time\n        userRepository.updateLastLogin(user.id, Instant.now())\n        \n        return AuthResponse(token, user)\n    }\n    \n    // * Authentication: Validate token method\n    fun validateToken(token: String): UserPrincipal {\n        // * Security: Check token validity\n        if (!jwtTokenProvider.validateToken(token)) {\n            throw AuthenticationException(\"Invalid or expired token\")\n        }\n        \n        // * Security: Extract user info from token\n        val userId = jwtTokenProvider.getUserIdFromToken(token)\n        \n        // * Database: Get user from database\n        val user = userRepository.findById(userId)\n            ?: throw AuthenticationException(\"User not found\")\n        \n        return UserPrincipal(user)\n    }\n}",
      "highlighted": "<span class=\"code-comment\">// * Authentication: Authentication service class</span>\n<span class=\"code-keyword\">class</span> AuthenticationService(\n    <span class=\"code-keyword\">private val</span> userRepository: UserRepository,\n    <span class=\"code-keyword\">private val</span> passwordEncoder: PasswordEncoder,\n    <span class=\"code-keyword\">private val</span> jwtTokenProvider: JwtTokenProvider\n) {\n    \n    <span class=\"code-comment\">// * Authentication: User login method</span>\n    <span class=\"code-keyword\">suspend fun</span> login(credentials: LoginRequest): AuthResponse {\n        <span class=\"code-comment\">// * Security: Validate input</span>\n        <span class=\"code-keyword\">require</span>(credentials.username.isNotBlank()) { <span class=\"code-string\">\"Username cannot be empty\"</span> }\n        <span class=\"code-keyword\">require</span>(credentials.password.isNotBlank()) { <span class=\"code-string\">\"Password cannot be empty\"</span> }\n        \n        <span class=\"code-comment\">// * Database: Find user by username</span>\n        <span class=\"code-keyword\">val</span> user = userRepository.findByUsername(credentials.username)\n            ?: <span class=\"code-keyword\">throw</span> AuthenticationException(<span class=\"code-string\">\"Invalid credentials\"</span>)\n        \n        <span class=\"code-comment\">// * Security: Verify password</span>\n        <span class=\"code-keyword\">if</span> (!passwordEncoder.matches(credentials.password, user.passwordHash)) {\n            <span class=\"code-keyword\">throw</span> AuthenticationException(<span class=\"code-string\">\"Invalid credentials\"</span>)\n        }\n        \n        <span class=\"code-comment\">// * Security: Check account status</span>\n        <span class=\"code-keyword\">if</span> (!user.isActive) {\n            <span class=\"code-keyword\">throw</span> AuthenticationException(<span class=\"code-string\">\"Account is disabled\"</span>)\n        }\n        \n        <span class=\"code-comment\">// * Session: Generate JWT token</span>\n        <span class=\"code-keyword\">val</span> token = jwtTokenProvider.createToken(user.id, user.roles)\n        \n        <span class=\"code-comment\">// * Database: Update last login time</span>\n        userRepository.updateLastLogin(user.id, Instant.now())\n        \n        <span class=\"code-keyword\">return</span> AuthResponse(token, user)\n    }\n    \n    <span class=\"code-comment\">// * Authentication: Validate token method</span>\n    <span class=\"code-keyword\">fun</span> validateToken(token: String): UserPrincipal {\n        <span class=\"code-comment\">// * Security: Check token validity</span>\n        <span class=\"code-keyword\">if</span> (!jwtTokenProvider.validateToken(token)) {\n            <span class=\"code-keyword\">throw</span> AuthenticationException(<span class=\"code-string\">\"Invalid or expired token\"</span>)\n        }\n        \n        <span class=\"code-comment\">// * Security: Extract user info from token</span>\n        <span class=\"code-keyword\">val</span> userId = jwtTokenProvider.getUserIdFromToken(token)\n        \n        <span class=\"code-comment\">// * Database: Get user from database</span>\n        <span class=\"code-keyword\">val</span> user = userRepository.findById(userId)\n            ?: <span class=\"code-keyword\">throw</span> AuthenticationException(<span class=\"code-string\">\"User not found\"</span>)\n        \n        <span class=\"code-keyword\">return</span> UserPrincipal(user)\n    }\n}"
    },
    {
      "name": "Assembly",
      "code": "; * Authentication: Password hashing function\n; Input: RSI points to password, RDI points to salt, RDX has length\n; Output: RAX contains hash result\nsection .text\n    global hash_password\n\nhash_password:\n    ; * Security: Save registers\n    push rbx\n    push r12\n    push r13\n    push r14\n    push r15\n    \n    ; * Security: Setup SHA-256 context\n    sub rsp, 112         ; Allocate stack for SHA256 context\n    mov rdi, rsp         ; RDI = pointer to context\n    call sha256_init     ; Initialize SHA256 context\n    \n    ; * Security: Update hash with password bytes\n    mov rdi, rsp         ; RDI = context\n    mov rsi, [rbp+16]    ; RSI = password\n    mov rdx, [rbp+24]    ; RDX = password length\n    call sha256_update   ; Update hash with password\n    \n    ; * Security: Update hash with salt\n    mov rdi, rsp         ; RDI = context\n    mov rsi, [rbp+32]    ; RSI = salt\n    mov rdx, [rbp+40]    ; RDX = salt length\n    call sha256_update   ; Update hash with salt\n    \n    ; * Security: Finalize hash computation\n    sub rsp, 32          ; Allocate 32 bytes for hash output\n    mov rdi, rsp         ; RDI = output buffer\n    mov rsi, [rsp+112]   ; RSI = context\n    call sha256_final    ; Finalize hash\n    \n    ; * Authentication: Copy hash to result buffer\n    mov rdi, [rbp+48]    ; RDI = output buffer\n    mov rsi, rsp         ; RSI = hash value\n    mov rcx, 32          ; RCX = 32 bytes to copy\n    rep movsb            ; Copy hash to output\n    \n    ; * Security: Cleanup and restore registers\n    add rsp, 144         ; Deallocate stack memory\n    pop r15\n    pop r14\n    pop r13\n    pop r12\n    pop rbx\n    ret\n\n; * Authentication: User verification procedure\n; Input: RDI points to username, RSI points to password\n; Output: RAX = 1 for success, 0 for failure\nverify_user:\n    ; * Database: Save user info pointer \n    push rbp\n    mov rbp, rsp\n    sub rsp, 128          ; Local stack space\n    \n    ; * Database: Find user record\n    mov rdi, [rbp+16]     ; Username\n    call find_user_record ; Find user in database\n    test rax, rax         ; Check if user found\n    jz .auth_failed       ; Jump if not found\n    \n    ; * Security: Compare password hash\n    mov r12, rax          ; R12 = user record\n    mov rdi, [rbp+24]     ; Password\n    mov rsi, [r12+16]     ; Salt from user record\n    call hash_password    ; Hash the password\n    \n    ; * Security: Compare computed hash with stored hash\n    mov rdi, rax          ; Hash result\n    mov rsi, [r12+24]     ; Stored hash in user record\n    mov rdx, 32           ; 32 bytes to compare\n    call memcmp\n    test rax, rax         ; If equal, RAX = 0 (success)\n    jnz .auth_failed      ; Jump if hashes don't match\n    \n    ; * Session: Generate session token\n    mov rdi, r12          ; User record\n    call create_session   ; Create new session\n    jmp .auth_done\n    \n.auth_failed:\n    xor rax, rax          ; RAX = 0 (failure)\n    \n.auth_done:\n    add rsp, 128\n    pop rbp\n    ret",
      "highlighted": "<span class=\"code-comment\">; * Authentication: Password hashing function</span>\n<span class=\"code-comment\">; Input: RSI points to password, RDI points to salt, RDX has length</span>\n<span class=\"code-comment\">; Output: RAX contains hash result</span>\n<span class=\"code-keyword\">section</span> .text\n    <span class=\"code-keyword\">global</span> hash_password\n\nhash_password:\n    <span class=\"code-comment\">; * Security: Save registers</span>\n    <span class=\"code-keyword\">push</span> rbx\n    <span class=\"code-keyword\">push</span> r12\n    <span class=\"code-keyword\">push</span> r13\n    <span class=\"code-keyword\">push</span> r14\n    <span class=\"code-keyword\">push</span> r15\n    \n    <span class=\"code-comment\">; * Security: Setup SHA-256 context</span>\n    <span class=\"code-keyword\">sub</span> rsp, 112         <span class=\"code-comment\">; Allocate stack for SHA256 context</span>\n    <span class=\"code-keyword\">mov</span> rdi, rsp         <span class=\"code-comment\">; RDI = pointer to context</span>\n    <span class=\"code-keyword\">call</span> sha256_init     <span class=\"code-comment\">; Initialize SHA256 context</span>\n    \n    <span class=\"code-comment\">; * Security: Update hash with password bytes</span>\n    <span class=\"code-keyword\">mov</span> rdi, rsp         <span class=\"code-comment\">; RDI = context</span>\n    <span class=\"code-keyword\">mov</span> rsi, [rbp+16]    <span class=\"code-comment\">; RSI = password</span>\n    <span class=\"code-keyword\">mov</span> rdx, [rbp+24]    <span class=\"code-comment\">; RDX = password length</span>\n    <span class=\"code-keyword\">call</span> sha256_update   <span class=\"code-comment\">; Update hash with password</span>\n    \n    <span class=\"code-comment\">; * Security: Update hash with salt</span>\n    <span class=\"code-keyword\">mov</span> rdi, rsp         <span class=\"code-comment\">; RDI = context</span>\n    <span class=\"code-keyword\">mov</span> rsi, [rbp+32]    <span class=\"code-comment\">; RSI = salt</span>\n    <span class=\"code-keyword\">mov</span> rdx, [rbp+40]    <span class=\"code-comment\">; RDX = salt length</span>\n    <span class=\"code-keyword\">call</span> sha256_update   <span class=\"code-comment\">; Update hash with salt</span>\n    \n    <span class=\"code-comment\">; * Security: Finalize hash computation</span>\n    <span class=\"code-keyword\">sub</span> rsp, 32          <span class=\"code-comment\">; Allocate 32 bytes for hash output</span>\n    <span class=\"code-keyword\">mov</span> rdi, rsp         <span class=\"code-comment\">; RDI = output buffer</span>\n    <span class=\"code-keyword\">mov</span> rsi, [rsp+112]   <span class=\"code-comment\">; RSI = context</span>\n    <span class=\"code-keyword\">call</span> sha256_final    <span class=\"code-comment\">; Finalize hash</span>\n    \n    <span class=\"code-comment\">; * Authentication: Copy hash to result buffer</span>\n    <span class=\"code-keyword\">mov</span> rdi, [rbp+48]    <span class=\"code-comment\">; RDI = output buffer</span>\n    <span class=\"code-keyword\">mov</span> rsi, rsp         <span class=\"code-comment\">; RSI = hash value</span>\n    <span class=\"code-keyword\">mov</span> rcx, 32          <span class=\"code-comment\">; RCX = 32 bytes to copy</span>\n    <span class=\"code-keyword\">rep movsb</span>            <span class=\"code-comment\">; Copy hash to output</span>\n    \n    <span class=\"code-comment\">; * Security: Cleanup and restore registers</span>\n    <span class=\"code-keyword\">add</span> rsp, 144         <span class=\"code-comment\">; Deallocate stack memory</span>\n    <span class=\"code-keyword\">pop</span> r15\n    <span class=\"code-keyword\">pop</span> r14\n    <span class=\"code-keyword\">pop</span> r13\n    <span class=\"code-keyword\">pop</span> r12\n    <span class=\"code-keyword\">pop</span> rbx\n    <span class=\"code-keyword\">ret</span>\n\n<span class=\"code-comment\">; * Authentication: User verification procedure</span>\n<span class=\"code-comment\">; Input: RDI points to username, RSI points to password</span>\n<span class=\"code-comment\">; Output: RAX = 1 for success, 0 for failure</span>\nverify_user:\n    <span class=\"code-comment\">; * Database: Save user info pointer </span>\n    <span class=\"code-keyword\">push</span> rbp\n    <span class=\"code-keyword\">mov</span> rbp, rsp\n    <span class=\"code-keyword\">sub</span> rsp, 128          <span class=\"code-comment\">; Local stack space</span>\n    \n    <span class=\"code-comment\">; * Database: Find user record</span>\n    <span class=\"code-keyword\">mov</span> rdi, [rbp+16]     <span class=\"code-comment\">; Username</span>\n    <span class=\"code-keyword\">call</span> find_user_record <span class=\"code-comment\">; Find user in database</span>\n    <span class=\"code-keyword\">test</span> rax, rax         <span class=\"code-comment\">; Check if user found</span>\n    <span class=\"code-keyword\">jz</span> .auth_failed       <span class=\"code-comment\">; Jump if not found</span>\n    \n    <span class=\"code-comment\">; * Security: Compare password hash</span>\n    <span class=\"code-keyword\">mov</span> r12, rax          <span class=\"code-comment\">; R12 = user record</span>\n    <span class=\"code-keyword\">mov</span> rdi, [rbp+24]     <span class=\"code-comment\">; Password</span>\n    <span class=\"code-keyword\">mov</span> rsi, [r12+16]     <span class=\"code-comment\">; Salt from user record</span>\n    <span class=\"code-keyword\">call</span> hash_password    <span class=\"code-comment\">; Hash the password</span>\n    \n    <span class=\"code-comment\">; * Security: Compare computed hash with stored hash</span>\n    <span class=\"code-keyword\">mov</span> rdi, rax          <span class=\"code-comment\">; Hash result</span>\n    <span class=\"code-keyword\">mov</span> rsi, [r12+24]     <span class=\"code-comment\">; Stored hash in user record</span>\n    <span class=\"code-keyword\">mov</span> rdx, 32           <span class=\"code-comment\">; 32 bytes to compare</span>\n    <span class=\"code-keyword\">call</span> memcmp\n    <span class=\"code-keyword\">test</span> rax, rax         <span class=\"code-comment\">; If equal, RAX = 0 (success)</span>\n    <span class=\"code-keyword\">jnz</span> .auth_failed      <span class=\"code-comment\">; Jump if hashes don't match</span>\n    \n    <span class=\"code-comment\">; * Session: Generate session token</span>\n    <span class=\"code-keyword\">mov</span> rdi, r12          <span class=\"code-comment\">; User record</span>\n    <span class=\"code-keyword\">call</span> create_session   <span class=\"code-comment\">; Create new session</span>\n    <span class=\"code-keyword\">jmp</span> .auth_done\n    \n.auth_failed:\n    <span class=\"code-keyword\">xor</span> rax, rax          <span class=\"code-comment\">; RAX = 0 (failure)</span>\n    \n.auth_done:\n    <span class=\"code-keyword\">add</span> rsp, 128\n    <span class=\"code-keyword\">pop</span> rbp\n    <span class=\"code-keyword\">ret</span>"
    },
    {
      "name": "Haskell",
      "code": "-- * Authentication: Authentication module\nmodule Authentication (\n    loginUser,\n    verifyToken,\n    generateToken,\n    hashPassword\n) where\n\nimport qualified Data.ByteString as BS\nimport qualified Data.ByteString.Char8 as C8\nimport qualified Crypto.Hash.SHA256 as SHA256\nimport qualified Data.Text as T\nimport qualified Data.Time.Clock as Clock\nimport qualified Database.MongoDB as Mongo\nimport Control.Monad.IO.Class (liftIO)\nimport System.Random (randomRIO)\n\n-- * Security: Password hashing function\nhashPassword :: T.Text -> T.Text -> T.Text\nhashPassword password salt = do\n    -- Convert to ByteString and combine with salt\n    let passwordBS = C8.pack $ T.unpack password\n    let saltBS = C8.pack $ T.unpack salt\n    let combined = BS.append passwordBS saltBS\n    \n    -- Apply SHA-256 hash\n    let hashed = SHA256.hash combined\n    \n    -- Convert back to Text\n    T.pack $ C8.unpack hashed\n\n-- * Security: Generate random salt\ngenerateSalt :: IO T.Text\ngenerateSalt = do\n    -- Generate 16 random bytes for salt\n    bytes <- mapM (\\_ -> randomRIO (0, 255 :: Int)) [1..16]\n    return $ T.pack $ concatMap (\\b -> [toEnum b]) bytes\n\n-- * Authentication: User login function\nloginUser :: Mongo.Pipe -> T.Text -> T.Text -> IO (Maybe UserSession)\nloginUser conn username password = do\n    -- * Database: Find user by username\n    let query = [\"username\" Mongo.=: username]\n    userDoc <- Mongo.findOne (Mongo.select query \"users\") conn\n    \n    case userDoc of\n        Nothing -> return Nothing\n        Just doc -> do\n            -- * Security: Extract stored hash and salt\n            let storedHash = T.pack $ Mongo.at \"passwordHash\" doc\n            let salt = T.pack $ Mongo.at \"salt\" doc\n            \n            -- * Security: Hash the provided password\n            let calculatedHash = hashPassword password salt\n            \n            -- * Authentication: Verify password hash\n            if calculatedHash == storedHash\n                then do\n                    -- * Session: Create session for the user\n                    userId <- return $ Mongo.at \"_id\" doc\n                    token <- generateToken userId\n                    expiry <- generateExpiry\n                    \n                    -- * Database: Store the session\n                    let sessionDoc = [\n                            \"userId\" Mongo.=: userId,\n                            \"token\" Mongo.=: token,\n                            \"expiresAt\" Mongo.=: expiry\n                          ]\n                    _ <- Mongo.insert \"sessions\" sessionDoc conn\n                    \n                    return $ Just UserSession {\n                        sessionUserId = userId,\n                        sessionToken = token,\n                        sessionExpiry = expiry\n                    }\n                else\n                    return Nothing\n\n-- * Session: Generate JWT token\ngenerateToken :: T.Text -> IO T.Text\ngenerateToken userId = do\n    -- Token generation implementation\n    currentTime <- liftIO Clock.getCurrentTime\n    return $ T.pack \"jwt-token-placeholder\"\n\n-- * Session: Generate expiry timestamp\ngenerateExpiry :: IO Clock.UTCTime\ngenerateExpiry = do\n    now <- Clock.getCurrentTime\n    return $ Clock.addUTCTime (24 * 3600) now  -- 24 hours from now\n\n-- * Authentication: Verify token validity\nverifyToken :: Mongo.Pipe -> T.Text -> IO (Maybe T.Text)\nverifyToken conn token = do\n    -- * Database: Find session by token\n    let query = [\"token\" Mongo.=: token]\n    sessionDoc <- Mongo.findOne (Mongo.select query \"sessions\") conn\n    \n    case sessionDoc of\n        Nothing -> return Nothing\n        Just doc -> do\n            -- * Security: Check if token is expired\n            let expiryTime = Mongo.at \"expiresAt\" doc\n            currentTime <- Clock.getCurrentTime\n            \n            if currentTime < expiryTime\n                then return $ Just $ Mongo.at \"userId\" doc\n                else return Nothing",
      "highlighted": "<span class=\"code-comment\">-- * Authentication: Authentication module</span>\n<span class=\"code-keyword\">module</span> Authentication (\n    loginUser,\n    verifyToken,\n    generateToken,\n    hashPassword\n) <span class=\"code-keyword\">where</span>\n\n<span class=\"code-keyword\">import qualified</span> Data.ByteString <span class=\"code-keyword\">as</span> BS\n<span class=\"code-keyword\">import qualified</span> Data.ByteString.Char8 <span class=\"code-keyword\">as</span> C8\n<span class=\"code-keyword\">import qualified</span> Crypto.Hash.SHA256 <span class=\"code-keyword\">as</span> SHA256\n<span class=\"code-keyword\">import qualified</span> Data.Text <span class=\"code-keyword\">as</span> T\n<span class=\"code-keyword\">import qualified</span> Data.Time.Clock <span class=\"code-keyword\">as</span> Clock\n<span class=\"code-keyword\">import qualified</span> Database.MongoDB <span class=\"code-keyword\">as</span> Mongo\n<span class=\"code-keyword\">import</span> Control.Monad.IO.Class (liftIO)\n<span class=\"code-keyword\">import</span> System.Random (randomRIO)\n\n<span class=\"code-comment\">-- * Security: Password hashing function</span>\nhashPassword :: T.Text -> T.Text -> T.Text\nhashPassword password salt = <span class=\"code-keyword\">do</span>\n    <span class=\"code-comment\">-- Convert to ByteString and combine with salt</span>\n    <span class=\"code-keyword\">let</span> passwordBS = C8.pack $ T.unpack password\n    <span class=\"code-keyword\">let</span> saltBS = C8.pack $ T.unpack salt\n    <span class=\"code-keyword\">let</span> combined = BS.append passwordBS saltBS\n    \n    <span class=\"code-comment\">-- Apply SHA-256 hash</span>\n    <span class=\"code-keyword\">let</span> hashed = SHA256.hash combined\n    \n    <span class=\"code-comment\">-- Convert back to Text</span>\n    T.pack $ C8.unpack hashed\n\n<span class=\"code-comment\">-- * Security: Generate random salt</span>\ngenerateSalt :: IO T.Text\ngenerateSalt = <span class=\"code-keyword\">do</span>\n    <span class=\"code-comment\">-- Generate 16 random bytes for salt</span>\n    bytes <- mapM (\\_ -> randomRIO (0, 255 :: Int)) [1..16]\n    <span class=\"code-keyword\">return</span> $ T.pack $ concatMap (\\b -> [toEnum b]) bytes\n\n<span class=\"code-comment\">-- * Authentication: User login function</span>\nloginUser :: Mongo.Pipe -> T.Text -> T.Text -> IO (Maybe UserSession)\nloginUser conn username password = <span class=\"code-keyword\">do</span>\n    <span class=\"code-comment\">-- * Database: Find user by username</span>\n    <span class=\"code-keyword\">let</span> query = [<span class=\"code-string\">\"username\"</span> Mongo.=: username]\n    userDoc <- Mongo.findOne (Mongo.select query <span class=\"code-string\">\"users\"</span>) conn\n    \n    <span class=\"code-keyword\">case</span> userDoc <span class=\"code-keyword\">of</span>\n        Nothing -> <span class=\"code-keyword\">return</span> Nothing\n        Just doc -> <span class=\"code-keyword\">do</span>\n            <span class=\"code-comment\">-- * Security: Extract stored hash and salt</span>\n            <span class=\"code-keyword\">let</span> storedHash = T.pack $ Mongo.at <span class=\"code-string\">\"passwordHash\"</span> doc\n            <span class=\"code-keyword\">let</span> salt = T.pack $ Mongo.at <span class=\"code-string\">\"salt\"</span> doc\n            \n            <span class=\"code-comment\">-- * Security: Hash the provided password</span>\n            <span class=\"code-keyword\">let</span> calculatedHash = hashPassword password salt\n            \n            <span class=\"code-comment\">-- * Authentication: Verify password hash</span>\n            <span class=\"code-keyword\">if</span> calculatedHash == storedHash\n                <span class=\"code-keyword\">then do</span>\n                    <span class=\"code-comment\">-- * Session: Create session for the user</span>\n                    userId <- <span class=\"code-keyword\">return</span> $ Mongo.at <span class=\"code-string\">\"_id\"</span> doc\n                    token <- generateToken userId\n                    expiry <- generateExpiry\n                    \n                    <span class=\"code-comment\">-- * Database: Store the session</span>\n                    <span class=\"code-keyword\">let</span> sessionDoc = [\n                            <span class=\"code-string\">\"userId\"</span> Mongo.=: userId,\n                            <span class=\"code-string\">\"token\"</span> Mongo.=: token,\n                            <span class=\"code-string\">\"expiresAt\"</span> Mongo.=: expiry\n                          ]\n                    _ <- Mongo.insert <span class=\"code-string\">\"sessions\"</span> sessionDoc conn\n                    \n                    <span class=\"code-keyword\">return</span> $ Just UserSession {\n                        sessionUserId = userId,\n                        sessionToken = token,\n                        sessionExpiry = expiry\n                    }\n                <span class=\"code-keyword\">else</span>\n                    <span class=\"code-keyword\">return</span> Nothing\n\n<span class=\"code-comment\">-- * Session: Generate JWT token</span>\ngenerateToken :: T.Text -> IO T.Text\ngenerateToken userId = <span class=\"code-keyword\">do</span>\n    <span class=\"code-comment\">-- Token generation implementation</span>\n    currentTime <- liftIO Clock.getCurrentTime\n    <span class=\"code-keyword\">return</span> $ T.pack <span class=\"code-string\">\"jwt-token-placeholder\"</span>\n\n<span class=\"code-comment\">-- * Session: Generate expiry timestamp</span>\ngenerateExpiry :: IO Clock.UTCTime\ngenerateExpiry = <span class=\"code-keyword\">do</span>\n    now <- Clock.getCurrentTime\n    <span class=\"code-keyword\">return</span> $ Clock.addUTCTime (24 * 3600) now  <span class=\"code-comment\">-- 24 hours from now</span>\n\n<span class=\"code-comment\">-- * Authentication: Verify token validity</span>\nverifyToken :: Mongo.Pipe -> T.Text -> IO (Maybe T.Text)\nverifyToken conn token = <span class=\"code-keyword\">do</span>\n    <span class=\"code-comment\">-- * Database: Find session by token</span>\n    <span class=\"code-keyword\">let</span> query = [<span class=\"code-string\">\"token\"</span> Mongo.=: token]\n    sessionDoc <- Mongo.findOne (Mongo.select query <span class=\"code-string\">\"sessions\"</span>) conn\n    \n    <span class=\"code-keyword\">case</span> sessionDoc <span class=\"code-keyword\">of</span>\n        Nothing -> <span class=\"code-keyword\">return</span> Nothing\n        Just doc -> <span class=\"code-keyword\">do</span>\n            <span class=\"code-comment\">-- * Security: Check if token is expired</span>\n            <span class=\"code-keyword\">let</span> expiryTime = Mongo.at <span class=\"code-string\">\"expiresAt\"</span> doc\n            currentTime <- Clock.getCurrentTime\n            \n            <span class=\"code-keyword\">if</span> currentTime < expiryTime\n                <span class=\"code-keyword\">then return</span> $ Just $ Mongo.at <span class=\"code-string\">\"userId\"</span> doc\n                <span class=\"code-keyword\">else return</span> Nothing"
    },
    {
      "name": "F#",
      "code": "// * Authentication: Authentication module\nmodule AuthenticationService =\n    open System\n    open System.Security.Cryptography\n    open System.Text\n    open System.IdentityModel.Tokens.Jwt\n    open Microsoft.IdentityModel.Tokens\n    open FSharp.Control.Tasks.V2.ContextInsensitive\n    open System.Threading.Tasks\n    \n    // * Security: Secret key for JWT token\n    let private secretKey = \"your-256-bit-secret-key-here-for-jwt-tokens\"\n    \n    // * Authentication: Login result type\n    type LoginResult =\n        | Success of token:string * userId:Guid\n        | InvalidCredentials\n        | AccountLocked\n        | Error of message:string\n    \n    // * Security: Hash password with salt\n    let hashPassword (password: string) (salt: string) : string =\n        // Combine password and salt\n        let combined = Encoding.UTF8.GetBytes(password + salt)\n        \n        // Create SHA256 hash\n        use sha256 = SHA256.Create()\n        let hashBytes = sha256.ComputeHash(combined)\n        \n        // Convert to hexadecimal string\n        BitConverter.ToString(hashBytes).Replace(\"-\", \"\").ToLower()\n    \n    // * Security: Generate random salt\n    let generateSalt() : string =\n        let random = Random()\n        let saltBytes = Array.zeroCreate<byte> 16\n        use rng = RandomNumberGenerator.Create()\n        rng.GetBytes(saltBytes)\n        Convert.ToBase64String(saltBytes)\n    \n    // * Authentication: Login user function\n    let loginUser (username: string) (password: string) : Task<LoginResult> = task {\n        // * Security: Validate inputs\n        if String.IsNullOrEmpty(username) || String.IsNullOrEmpty(password) then\n            return InvalidCredentials\n        else\n            try\n                // * Database: Find user by username\n                let! userOption = Database.findUserByUsername username\n                \n                match userOption with\n                | None -> \n                    return InvalidCredentials\n                | Some user ->\n                    // * Security: Check if account is locked\n                    if user.IsLocked then\n                        return AccountLocked\n                    else\n                        // * Security: Hash password with stored salt\n                        let hashedPassword = hashPassword password user.Salt\n                        \n                        // * Authentication: Verify password\n                        if hashedPassword = user.PasswordHash then\n                            // * Session: Generate JWT token\n                            let token = generateJwtToken user.Id user.Username user.Roles\n                            \n                            // * Database: Update last login time\n                            do! Database.updateLastLogin user.Id DateTime.UtcNow\n                            \n                            return Success(token, user.Id)\n                        else\n                            // * Security: Track failed login attempt\n                            do! Database.incrementFailedLoginAttempt user.Id\n                            return InvalidCredentials\n            with ex ->\n                return Error ex.Message\n    }\n    \n    // * Session: Generate JWT token\n    let private generateJwtToken (userId: Guid) (username: string) (roles: string list) : string =\n        let expires = DateTime.UtcNow.AddHours(24.0)\n        \n        let claims = [|\n            new System.Security.Claims.Claim(JwtRegisteredClaimNames.Sub, userId.ToString())\n            new System.Security.Claims.Claim(JwtRegisteredClaimNames.UniqueName, username)\n            // Add role claims\n            for role in roles do\n                new System.Security.Claims.Claim(\"role\", role)\n        |]\n        \n        let key = SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey))\n        let creds = SigningCredentials(key, SecurityAlgorithms.HmacSha256)\n        \n        let token = JwtSecurityToken(\n            issuer = \"your-app\",\n            audience = \"your-app-users\",\n            claims = claims,\n            expires = expires,\n            signingCredentials = creds\n        )\n        \n        let tokenHandler = JwtSecurityTokenHandler()\n        tokenHandler.WriteToken(token)\n    \n    // * Authentication: Verify token validity\n    let verifyToken (token: string) : Task<option<Guid>> = task {\n        if String.IsNullOrEmpty(token) then\n            return None\n        else\n            try\n                let tokenHandler = JwtSecurityTokenHandler()\n                let key = SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey))\n                \n                let validationParameters = TokenValidationParameters(\n                    ValidateIssuerSigningKey = true,\n                    IssuerSigningKey = key,\n                    ValidateIssuer = true,\n                    ValidIssuer = \"your-app\",\n                    ValidateAudience = true,\n                    ValidAudience = \"your-app-users\",\n                    ValidateLifetime = true,\n                    ClockSkew = TimeSpan.Zero\n                )\n                \n                let principal = tokenHandler.ValidateToken(token, validationParameters, ref Unchecked.defaultof<_>)\n                let subClaim = principal.FindFirst(JwtRegisteredClaimNames.Sub)\n                \n                if subClaim <> null then\n                    return Some(Guid.Parse(subClaim.Value))\n                else\n                    return None\n            with _ ->\n                return None\n    }",
      "highlighted": "<span class=\"code-comment\">// * Authentication: Authentication module</span>\n<span class=\"code-keyword\">module</span> AuthenticationService =\n    <span class=\"code-keyword\">open</span> System\n    <span class=\"code-keyword\">open</span> System.Security.Cryptography\n    <span class=\"code-keyword\">open</span> System.Text\n    <span class=\"code-keyword\">open</span> System.IdentityModel.Tokens.Jwt\n    <span class=\"code-keyword\">open</span> Microsoft.IdentityModel.Tokens\n    <span class=\"code-keyword\">open</span> FSharp.Control.Tasks.V2.ContextInsensitive\n    <span class=\"code-keyword\">open</span> System.Threading.Tasks\n    \n    <span class=\"code-comment\">// * Security: Secret key for JWT token</span>\n    <span class=\"code-keyword\">let private</span> secretKey = <span class=\"code-string\">\"your-256-bit-secret-key-here-for-jwt-tokens\"</span>\n    \n    <span class=\"code-comment\">// * Authentication: Login result type</span>\n    <span class=\"code-keyword\">type</span> LoginResult =\n        | Success <span class=\"code-keyword\">of</span> token:string * userId:Guid\n        | InvalidCredentials\n        | AccountLocked\n        | Error <span class=\"code-keyword\">of</span> message:string\n    \n    <span class=\"code-comment\">// * Security: Hash password with salt</span>\n    <span class=\"code-keyword\">let</span> hashPassword (password: string) (salt: string) : string =\n        <span class=\"code-comment\">// Combine password and salt</span>\n        <span class=\"code-keyword\">let</span> combined = Encoding.UTF8.GetBytes(password + salt)\n        \n        <span class=\"code-comment\">// Create SHA256 hash</span>\n        <span class=\"code-keyword\">use</span> sha256 = SHA256.Create()\n        <span class=\"code-keyword\">let</span> hashBytes = sha256.ComputeHash(combined)\n        \n        <span class=\"code-comment\">// Convert to hexadecimal string</span>\n        BitConverter.ToString(hashBytes).Replace(<span class=\"code-string\">\"-\"</span>, <span class=\"code-string\">\"\"</span>).ToLower()\n    \n    <span class=\"code-comment\">// * Security: Generate random salt</span>\n    <span class=\"code-keyword\">let</span> generateSalt() : string =\n        <span class=\"code-keyword\">let</span> random = Random()\n        <span class=\"code-keyword\">let</span> saltBytes = Array.zeroCreate<byte> 16\n        <span class=\"code-keyword\">use</span> rng = RandomNumberGenerator.Create()\n        rng.GetBytes(saltBytes)\n        Convert.ToBase64String(saltBytes)\n    \n    <span class=\"code-comment\">// * Authentication: Login user function</span>\n    <span class=\"code-keyword\">let</span> loginUser (username: string) (password: string) : Task<LoginResult> = task {\n        <span class=\"code-comment\">// * Security: Validate inputs</span>\n        <span class=\"code-keyword\">if</span> String.IsNullOrEmpty(username) || String.IsNullOrEmpty(password) <span class=\"code-keyword\">then</span>\n            <span class=\"code-keyword\">return</span> InvalidCredentials\n        <span class=\"code-keyword\">else</span>\n            <span class=\"code-keyword\">try</span>\n                <span class=\"code-comment\">// * Database: Find user by username</span>\n                <span class=\"code-keyword\">let!</span> userOption = Database.findUserByUsername username\n                \n                <span class=\"code-keyword\">match</span> userOption <span class=\"code-keyword\">with</span>\n                | None -> \n                    <span class=\"code-keyword\">return</span> InvalidCredentials\n                | Some user ->\n                    <span class=\"code-comment\">// * Security: Check if account is locked</span>\n                    <span class=\"code-keyword\">if</span> user.IsLocked <span class=\"code-keyword\">then</span>\n                        <span class=\"code-keyword\">return</span> AccountLocked\n                    <span class=\"code-keyword\">else</span>\n                        <span class=\"code-comment\">// * Security: Hash password with stored salt</span>\n                        <span class=\"code-keyword\">let</span> hashedPassword = hashPassword password user.Salt\n                        \n                        <span class=\"code-comment\">// * Authentication: Verify password</span>\n                        <span class=\"code-keyword\">if</span> hashedPassword = user.PasswordHash <span class=\"code-keyword\">then</span>\n                            <span class=\"code-comment\">// * Session: Generate JWT token</span>\n                            <span class=\"code-keyword\">let</span> token = generateJwtToken user.Id user.Username user.Roles\n                            \n                            <span class=\"code-comment\">// * Database: Update last login time</span>\n                            <span class=\"code-keyword\">do!</span> Database.updateLastLogin user.Id DateTime.UtcNow\n                            \n                            <span class=\"code-keyword\">return</span> Success(token, user.Id)\n                        <span class=\"code-keyword\">else</span>\n                            <span class=\"code-comment\">// * Security: Track failed login attempt</span>\n                            <span class=\"code-keyword\">do!</span> Database.incrementFailedLoginAttempt user.Id\n                            <span class=\"code-keyword\">return</span> InvalidCredentials\n            <span class=\"code-keyword\">with</span> ex ->\n                <span class=\"code-keyword\">return</span> Error ex.Message\n    }\n    \n    <span class=\"code-comment\">// * Session: Generate JWT token</span>\n    <span class=\"code-keyword\">let private</span> generateJwtToken (userId: Guid) (username: string) (roles: string list) : string =\n        <span class=\"code-keyword\">let</span> expires = DateTime.UtcNow.AddHours(24.0)\n        \n        <span class=\"code-keyword\">let</span> claims = [|\n            <span class=\"code-keyword\">new</span> System.Security.Claims.Claim(JwtRegisteredClaimNames.Sub, userId.ToString())\n            <span class=\"code-keyword\">new</span> System.Security.Claims.Claim(JwtRegisteredClaimNames.UniqueName, username)\n            <span class=\"code-comment\">// Add role claims</span>\n            <span class=\"code-keyword\">for</span> role <span class=\"code-keyword\">in</span> roles <span class=\"code-keyword\">do</span>\n                <span class=\"code-keyword\">new</span> System.Security.Claims.Claim(<span class=\"code-string\">\"role\"</span>, role)\n        |]\n        \n        <span class=\"code-keyword\">let</span> key = SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey))\n        <span class=\"code-keyword\">let</span> creds = SigningCredentials(key, SecurityAlgorithms.HmacSha256)\n        \n        <span class=\"code-keyword\">let</span> token = JwtSecurityToken(\n            issuer = <span class=\"code-string\">\"your-app\"</span>,\n            audience = <span class=\"code-string\">\"your-app-users\"</span>,\n            claims = claims,\n            expires = expires,\n            signingCredentials = creds\n        )\n        \n        <span class=\"code-keyword\">let</span> tokenHandler = JwtSecurityTokenHandler()\n        tokenHandler.WriteToken(token)\n    \n    <span class=\"code-comment\">// * Authentication: Verify token validity</span>\n    <span class=\"code-keyword\">let</span> verifyToken (token: string) : Task<option<Guid>> = task {\n        <span class=\"code-keyword\">if</span> String.IsNullOrEmpty(token) <span class=\"code-keyword\">then</span>\n            <span class=\"code-keyword\">return</span> None\n        <span class=\"code-keyword\">else</span>\n            <span class=\"code-keyword\">try</span>\n                <span class=\"code-keyword\">let</span> tokenHandler = JwtSecurityTokenHandler()\n                <span class=\"code-keyword\">let</span> key = SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey))\n                \n                <span class=\"code-keyword\">let</span> validationParameters = TokenValidationParameters(\n                    ValidateIssuerSigningKey = true,\n                    IssuerSigningKey = key,\n                    ValidateIssuer = true,\n                    ValidIssuer = <span class=\"code-string\">\"your-app\"</span>,\n                    ValidateAudience = true,\n                    ValidAudience = <span class=\"code-string\">\"your-app-users\"</span>,\n                    ValidateLifetime = true,\n                    ClockSkew = TimeSpan.Zero\n                )\n                \n                <span class=\"code-keyword\">let</span> principal = tokenHandler.ValidateToken(token, validationParameters, ref Unchecked.defaultof<_>)\n                <span class=\"code-keyword\">let</span> subClaim = principal.FindFirst(JwtRegisteredClaimNames.Sub)\n                \n                <span class=\"code-keyword\">if</span> subClaim <> null <span class=\"code-keyword\">then</span>\n                    <span class=\"code-keyword\">return</span> Some(Guid.Parse(subClaim.Value))\n                <span class=\"code-keyword\">else</span>\n                    <span class=\"code-keyword\">return</span> None\n            <span class=\"code-keyword\">with</span> _ ->\n                <span class=\"code-keyword\">return</span> None\n    }"
    },
    {
      "name": "Clojure",
      "code": ";; * Authentication: User login process\n(defn login [username password]\n  ;; Validate inputs\n  (when (or (nil? username) (nil? password))\n    (throw (Exception. \"Username and password are required\")))\n  \n  ;; * Authentication: Hash password\n  (let [hashed-password (hash-password password)]\n    \n    ;; * Authentication: Check user credentials\n    (-> (verify-user username hashed-password)\n        ;; * Session: Create user session\n        (create-session))))",
      "highlighted": "<span class=\"code-comment\">;; * Authentication: User login process</span>\n<span class=\"code-keyword\">(defn</span> login [username password]\n  <span class=\"code-comment\">;; Validate inputs</span>\n  <span class=\"code-keyword\">(when</span> (or (nil? username) (nil? password))\n    (<span class=\"code-keyword\">throw</span> (Exception. <span class=\"code-string\">\"Username and password are required\"</span>)))\n  \n  <span class=\"code-comment\">;; * Authentication: Hash password</span>\n  <span class=\"code-keyword\">(let</span> [hashed-password (hash-password password)]\n    \n    <span class=\"code-comment\">;; * Authentication: Check user credentials</span>\n    (<span class=\"code-keyword\">-></span> (verify-user username hashed-password)\n        <span class=\"code-comment\">;; * Session: Create user session</span>\n        (create-session))))"
    },
    {
      "name": "Scala",
      "code": "// * Authentication: User login process\ndef login(username: String, password: String): Future[Session] = {\n  // Validate inputs\n  if (username.isEmpty || password.isEmpty) {\n    throw new IllegalArgumentException(\"Username and password are required\")\n  }\n  \n  // * Authentication: Hash password\n  val hashedPassword = hashPassword(password)\n  \n  // * Authentication: Check user credentials\n  verifyUser(username, hashedPassword).flatMap { userData =>\n    // * Session: Create user session\n    createSession(userData)\n  }\n}",
      "highlighted": "<span class=\"code-comment\">// * Authentication: User login process</span>\n<span class=\"code-keyword\">def</span> login(username: String, password: String): Future[Session] = {\n  <span class=\"code-comment\">// Validate inputs</span>\n  <span class=\"code-keyword\">if</span> (username.isEmpty || password.isEmpty) {\n    <span class=\"code-keyword\">throw new</span> IllegalArgumentException(<span class=\"code-string\">\"Username and password are required\"</span>)\n  }\n  \n  <span class=\"code-comment\">// * Authentication: Hash password</span>\n  <span class=\"code-keyword\">val</span> hashedPassword = hashPassword(password)\n  \n  <span class=\"code-comment\">// * Authentication: Check user credentials</span>\n  verifyUser(username, hashedPassword).<span class=\"code-keyword\">flatMap</span> { userData =>\n    <span class=\"code-comment\">// * Session: Create user session</span>\n    createSession(userData)\n  }\n}"
    },
    {
      "name": "Elm",
      "code": "-- * Authentication: User login process\nlogin : String -> String -> Cmd Msg\nlogin username password =\n    -- Validate inputs\n    if String.isEmpty username || String.isEmpty password then\n        Cmd.none\n    else\n        -- * Authentication: Hash password\n        let\n            hashedPassword =\n                hashPassword password\n        in\n        -- * Authentication: Check user credentials\n        verifyUser username hashedPassword\n            -- * Session: Create user session\n            |> Task.andThen createSession\n            |> Task.attempt LoginCompleted",
      "highlighted": "<span class=\"code-comment\">-- * Authentication: User login process</span>\n<span class=\"code-keyword\">login</span> : String -> String -> Cmd Msg\n<span class=\"code-keyword\">login</span> username password =\n    <span class=\"code-comment\">-- Validate inputs</span>\n    <span class=\"code-keyword\">if</span> String.isEmpty username || String.isEmpty password <span class=\"code-keyword\">then</span>\n        Cmd.none\n    <span class=\"code-keyword\">else</span>\n        <span class=\"code-comment\">-- * Authentication: Hash password</span>\n        <span class=\"code-keyword\">let</span>\n            hashedPassword =\n                hashPassword password\n        <span class=\"code-keyword\">in</span>\n        <span class=\"code-comment\">-- * Authentication: Check user credentials</span>\n        verifyUser username hashedPassword\n            <span class=\"code-comment\">-- * Session: Create user session</span>\n            |> Task.andThen createSession\n            |> Task.attempt LoginCompleted"
    },
    {
      "name": "Shell/Bash",
      "code": "#!/bin/bash\n\n# * Authentication: User login process\nlogin() {\n  username=$1\n  password=$2\n  \n  # Validate inputs\n  if [ -z \"$username\" ] || [ -z \"$password\" ]; then\n    echo \"Error: Username and password are required\"\n    return 1\n  fi\n  \n  # * Authentication: Hash password\n  hashed_password=$(hash_password \"$password\")\n  \n  # * Authentication: Check user credentials\n  user_data=$(verify_user \"$username\" \"$hashed_password\")\n  if [ $? -eq 0 ]; then\n    # * Session: Create user session\n    create_session \"$user_data\"\n    return 0\n  else\n    return 1\n  fi\n}",
      "highlighted": "<span class=\"code-comment\">#!/bin/bash</span>\n\n<span class=\"code-comment\"># * Authentication: User login process</span>\n<span class=\"code-keyword\">login</span>() {\n  username=$1\n  password=$2\n  \n  <span class=\"code-comment\"># Validate inputs</span>\n  <span class=\"code-keyword\">if</span> [ -z \"$username\" ] || [ -z \"$password\" ]; <span class=\"code-keyword\">then</span>\n    <span class=\"code-keyword\">echo</span> <span class=\"code-string\">\"Error: Username and password are required\"</span>\n    <span class=\"code-keyword\">return</span> 1\n  <span class=\"code-keyword\">fi</span>\n  \n  <span class=\"code-comment\"># * Authentication: Hash password</span>\n  hashed_password=$(<span class=\"code-keyword\">hash_password</span> \"$password\")\n  \n  <span class=\"code-comment\"># * Authentication: Check user credentials</span>\n  user_data=$(<span class=\"code-keyword\">verify_user</span> \"$username\" \"$hashed_password\")\n  <span class=\"code-keyword\">if</span> [ $? -eq 0 ]; <span class=\"code-keyword\">then</span>\n    <span class=\"code-comment\"># * Session: Create user session</span>\n    <span class=\"code-keyword\">create_session</span> \"$user_data\"\n    <span class=\"code-keyword\">return</span> 0\n  <span class=\"code-keyword\">else</span>\n    <span class=\"code-keyword\">return</span> 1\n  <span class=\"code-keyword\">fi</span>\n}"
    },
    {
      "name": "PowerShell",
      "code": "# * Authentication: User login process\nfunction Login-User {\n    param (\n        [Parameter(Mandatory=$true)]\n        [string]$Username,\n        \n        [Parameter(Mandatory=$true)]\n        [string]$Password\n    )\n    \n    # Validate inputs\n    if ([string]::IsNullOrEmpty($Username) -or [string]::IsNullOrEmpty($Password)) {\n        throw \"Username and password are required\"\n    }\n    \n    # * Authentication: Hash password\n    $hashedPassword = Get-PasswordHash -Password $Password\n    \n    # * Authentication: Check user credentials\n    $userData = Verify-User -Username $Username -Password $hashedPassword\n    \n    if ($userData) {\n        # * Session: Create user session\n        return New-UserSession -UserData $userData\n    }\n    else {\n        throw \"Authentication failed\"\n    }\n}",
      "highlighted": "<span class=\"code-comment\"># * Authentication: User login process</span>\n<span class=\"code-keyword\">function</span> Login-User {\n    <span class=\"code-keyword\">param</span> (\n        [Parameter(Mandatory=$true)]\n        [string]$Username,\n        \n        [Parameter(Mandatory=$true)]\n        [string]$Password\n    )\n    \n    <span class=\"code-comment\"># Validate inputs</span>\n    <span class=\"code-keyword\">if</span> ([string]::IsNullOrEmpty($Username) -or [string]::IsNullOrEmpty($Password)) {\n        <span class=\"code-keyword\">throw</span> <span class=\"code-string\">\"Username and password are required\"</span>\n    }\n    \n    <span class=\"code-comment\"># * Authentication: Hash password</span>\n    $hashedPassword = Get-PasswordHash -Password $Password\n    \n    <span class=\"code-comment\"># * Authentication: Check user credentials</span>\n    $userData = Verify-User -Username $Username -Password $hashedPassword\n    \n    <span class=\"code-keyword\">if</span> ($userData) {\n        <span class=\"code-comment\"># * Session: Create user session</span>\n        <span class=\"code-keyword\">return</span> New-UserSession -UserData $userData\n    }\n    <span class=\"code-keyword\">else</span> {\n        <span class=\"code-keyword\">throw</span> <span class=\"code-string\">\"Authentication failed\"</span>\n    }\n}"
    },
    {
      "name": "Lua",
      "code": "-- * Authentication: User login process\nfunction login(username, password)\n    -- Validate inputs\n    if not username or not password then\n        error(\"Username and password are required\")\n    end\n    \n    -- * Authentication: Hash password\n    local hashedPassword = hashPassword(password)\n    \n    -- * Authentication: Check user credentials\n    local success, userData = pcall(verifyUser, username, hashedPassword)\n    \n    if success then\n        -- * Session: Create user session\n        return createSession(userData)\n    else\n        error(\"Authentication failed\")\n    end\nend",
      "highlighted": "<span class=\"code-comment\">-- * Authentication: User login process</span>\n<span class=\"code-keyword\">function</span> login(username, password)\n    <span class=\"code-comment\">-- Validate inputs</span>\n    <span class=\"code-keyword\">if not</span> username <span class=\"code-keyword\">or not</span> password <span class=\"code-keyword\">then</span>\n        <span class=\"code-keyword\">error</span>(<span class=\"code-string\">\"Username and password are required\"</span>)\n    <span class=\"code-keyword\">end</span>\n    \n    <span class=\"code-comment\">-- * Authentication: Hash password</span>\n    <span class=\"code-keyword\">local</span> hashedPassword = hashPassword(password)\n    \n    <span class=\"code-comment\">-- * Authentication: Check user credentials</span>\n    <span class=\"code-keyword\">local</span> success, userData = pcall(verifyUser, username, hashedPassword)\n    \n    <span class=\"code-keyword\">if</span> success <span class=\"code-keyword\">then</span>\n        <span class=\"code-comment\">-- * Session: Create user session</span>\n        <span class=\"code-keyword\">return</span> createSession(userData)\n    <span class=\"code-keyword\">else</span>\n        <span class=\"code-keyword\">error</span>(<span class=\"code-string\">\"Authentication failed\"</span>)\n    <span class=\"code-keyword\">end</span>\n<span class=\"code-keyword\">end</span>"
    },
    {
      "name": "R",
      "code": "# * Authentication: User login process\nlogin <- function(username, password) {\n  # Validate inputs\n  if (is.null(username) || is.null(password) || nchar(username) == 0 || nchar(password) == 0) {\n    stop(\"Username and password are required\")\n  }\n  \n  # * Authentication: Hash password\n  hashed_password <- hash_password(password)\n  \n  # * Authentication: Check user credentials\n  tryCatch({\n    user_data <- verify_user(username, hashed_password)\n    \n    # * Session: Create user session\n    create_session(user_data)\n  }, error = function(e) {\n    stop(\"Authentication failed\")\n  })\n}",
      "highlighted": "<span class=\"code-comment\"># * Authentication: User login process</span>\nlogin <- <span class=\"code-keyword\">function</span>(username, password) {\n  <span class=\"code-comment\"># Validate inputs</span>\n  <span class=\"code-keyword\">if</span> (is.null(username) || is.null(password) || nchar(username) == 0 || nchar(password) == 0) {\n    <span class=\"code-keyword\">stop</span>(<span class=\"code-string\">\"Username and password are required\"</span>)\n  }\n  \n  <span class=\"code-comment\"># * Authentication: Hash password</span>\n  hashed_password <- hash_password(password)\n  \n  <span class=\"code-comment\"># * Authentication: Check user credentials</span>\n  <span class=\"code-keyword\">tryCatch</span>({\n    user_data <- verify_user(username, hashed_password)\n    \n    <span class=\"code-comment\"># * Session: Create user session</span>\n    create_session(user_data)\n  }, error = <span class=\"code-keyword\">function</span>(e) {\n    <span class=\"code-keyword\">stop</span>(<span class=\"code-string\">\"Authentication failed\"</span>)\n  })\n}"
    },
    {
      "name": "YAML",
      "code": "# * Authentication: User login process\nauthentication:\n  login:\n    # Validate inputs\n    required_fields:\n      - username\n      - password\n    validation_error: \"Username and password are required\"\n    \n    # * Authentication: Hash password\n    password_processing:\n      hash_function: bcrypt\n      salt_rounds: 10\n    \n    # * Authentication: Check user credentials\n    credential_verification:\n      method: database_lookup\n      failure_message: \"Invalid username or password\"\n    \n    # * Session: Create user session\n    session_creation:\n      expiry: 3600\n      token_type: JWT\n      include_permissions: true",
      "highlighted": "<span class=\"code-comment\"># * Authentication: User login process</span>\n<span class=\"code-keyword\">authentication</span>:\n  <span class=\"code-keyword\">login</span>:\n    <span class=\"code-comment\"># Validate inputs</span>\n    <span class=\"code-keyword\">required_fields</span>:\n      - username\n      - password\n    <span class=\"code-keyword\">validation_error</span>: <span class=\"code-string\">\"Username and password are required\"</span>\n    \n    <span class=\"code-comment\"># * Authentication: Hash password</span>\n    <span class=\"code-keyword\">password_processing</span>:\n      <span class=\"code-keyword\">hash_function</span>: bcrypt\n      <span class=\"code-keyword\">salt_rounds</span>: 10\n    \n    <span class=\"code-comment\"># * Authentication: Check user credentials</span>\n    <span class=\"code-keyword\">credential_verification</span>:\n      <span class=\"code-keyword\">method</span>: database_lookup\n      <span class=\"code-keyword\">failure_message</span>: <span class=\"code-string\">\"Invalid username or password\"</span>\n    \n    <span class=\"code-comment\"># * Session: Create user session</span>\n    <span class=\"code-keyword\">session_creation</span>:\n      <span class=\"code-keyword\">expiry</span>: 3600\n      <span class=\"code-keyword\">token_type</span>: JWT\n      <span class=\"code-keyword\">include_permissions</span>: true"
    },
    {
      "name": "Markdown",
      "code": "# Authentication: User login process\n\n## Input Validation\n\n<!-- * Authentication: Input validation -->\nThe system requires both username and password to be provided. If either is missing, an error message is returned stating \"Username and password are required\".\n\n## Password Hashing\n\n<!-- * Authentication: Hash password -->\nFor security, all passwords are hashed using bcrypt with 10 salt rounds before any verification is performed.\n\n## Credential Verification\n\n<!-- * Authentication: Check user credentials -->\nThe system verifies the provided username against the hashed password in the database. If the credentials don't match or the user doesn't exist, the login process fails.\n\n## Session Management\n\n<!-- * Session: Create user session -->\nUpon successful verification, a new user session is created with a JWT token that expires after 1 hour. The token includes the user's basic information and permissions.",
      "highlighted": "<span class=\"code-keyword\"># Authentication: User login process</span>\n\n<span class=\"code-keyword\">## Input Validation</span>\n\n<span class=\"code-comment\"><!-- * Authentication: Input validation --></span>\nThe system requires both username and password to be provided. If either is missing, an error message is returned stating <span class=\"code-string\">\"Username and password are required\"</span>.\n\n<span class=\"code-keyword\">## Password Hashing</span>\n\n<span class=\"code-comment\"><!-- * Authentication: Hash password --></span>\nFor security, all passwords are hashed using bcrypt with 10 salt rounds before any verification is performed.\n\n<span class=\"code-keyword\">## Credential Verification</span>\n\n<span class=\"code-comment\"><!-- * Authentication: Check user credentials --></span>\nThe system verifies the provided username against the hashed password in the database. If the credentials don't match or the user doesn't exist, the login process fails.\n\n<span class=\"code-keyword\">## Session Management</span>\n\n<span class=\"code-comment\"><!-- * Session: Create user session --></span>\nUpon successful verification, a new user session is created with a JWT token that expires after 1 hour. The token includes the user's basic information and permissions."
    },
    {
      "name": "Dart",
      "code": "// * Authentication: User login process\nFuture<Session> login(String username, String password) async {\n  // Validate inputs\n  if (username == null || username.isEmpty || password == null || password.isEmpty) {\n    throw AuthenticationException('Username and password are required');\n  }\n  \n  // * Authentication: Hash password\n  final hashedPassword = await hashPassword(password);\n  \n  // * Authentication: Check user credentials\n  try {\n    final userData = await verifyUser(username, hashedPassword);\n    \n    // * Session: Create user session\n    return await createSession(userData);\n  } catch (e) {\n    throw AuthenticationException('Invalid credentials');\n  }\n}",
      "highlighted": "<span class=\"code-comment\">// * Authentication: User login process</span>\n<span class=\"code-keyword\">Future</span>&lt;Session&gt; login(<span class=\"code-keyword\">String</span> username, <span class=\"code-keyword\">String</span> password) <span class=\"code-keyword\">async</span> {\n  <span class=\"code-comment\">// Validate inputs</span>\n  <span class=\"code-keyword\">if</span> (username == null || username.isEmpty || password == null || password.isEmpty) {\n    <span class=\"code-keyword\">throw</span> AuthenticationException(<span class=\"code-string\">'Username and password are required'</span>);\n  }\n  \n  <span class=\"code-comment\">// * Authentication: Hash password</span>\n  <span class=\"code-keyword\">final</span> hashedPassword = <span class=\"code-keyword\">await</span> hashPassword(password);\n  \n  <span class=\"code-comment\">// * Authentication: Check user credentials</span>\n  <span class=\"code-keyword\">try</span> {\n    <span class=\"code-keyword\">final</span> userData = <span class=\"code-keyword\">await</span> verifyUser(username, hashedPassword);\n    \n    <span class=\"code-comment\">// * Session: Create user session</span>\n    <span class=\"code-keyword\">return await</span> createSession(userData);\n  } <span class=\"code-keyword\">catch</span> (e) {\n    <span class=\"code-keyword\">throw</span> AuthenticationException(<span class=\"code-string\">'Invalid credentials'</span>);\n  }\n}"
    },
    {
      "name": "Julia",
      "code": "# * Authentication: User login process\nfunction login(username, password)\n    # Validate inputs\n    if isempty(username) || isempty(password)\n        throw(ArgumentError(\"Username and password are required\"))\n    end\n    \n    # * Authentication: Hash password\n    hashed_password = hash_password(password)\n    \n    # * Authentication: Check user credentials\n    try\n        user_data = verify_user(username, hashed_password)\n        \n        # * Session: Create user session\n        return create_session(user_data)\n    catch e\n        throw(AuthenticationError(\"Invalid credentials\"))\n    end\nend",
      "highlighted": "<span class=\"code-comment\"># * Authentication: User login process</span>\n<span class=\"code-keyword\">function</span> login(username, password)\n    <span class=\"code-comment\"># Validate inputs</span>\n    <span class=\"code-keyword\">if</span> isempty(username) || isempty(password)\n        <span class=\"code-keyword\">throw</span>(ArgumentError(<span class=\"code-string\">\"Username and password are required\"</span>))\n    <span class=\"code-keyword\">end</span>\n    \n    <span class=\"code-comment\"># * Authentication: Hash password</span>\n    hashed_password = hash_password(password)\n    \n    <span class=\"code-comment\"># * Authentication: Check user credentials</span>\n    <span class=\"code-keyword\">try</span>\n        user_data = verify_user(username, hashed_password)\n        \n        <span class=\"code-comment\"># * Session: Create user session</span>\n        <span class=\"code-keyword\">return</span> create_session(user_data)\n    <span class=\"code-keyword\">catch</span> e\n        <span class=\"code-keyword\">throw</span>(AuthenticationError(<span class=\"code-string\">\"Invalid credentials\"</span>))\n    <span class=\"code-keyword\">end</span>\n<span class=\"code-keyword\">end</span>"
    },
    {
      "name": "COBOL",
      "code": "      * * Authentication: User login process\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LOGIN-USER.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 WS-USERNAME PIC X(20).\n       01 WS-PASSWORD PIC X(20).\n       01 WS-HASHED-PASSWORD PIC X(64).\n       01 WS-USER-DATA.\n          05 WS-USER-ID PIC 9(10).\n          05 WS-USER-ROLE PIC X(10).\n       01 WS-SESSION-TOKEN PIC X(64).\n       01 WS-STATUS PIC 9(2).\n          88 SUCCESS VALUE 0.\n          88 VALIDATION-ERROR VALUE 1.\n          88 AUTH-ERROR VALUE 2.\n       \n       PROCEDURE DIVISION USING WS-USERNAME WS-PASSWORD.\n      * Validate inputs\n       IF WS-USERNAME = SPACES OR WS-PASSWORD = SPACES\n          MOVE 1 TO WS-STATUS\n          DISPLAY \"Username and password are required\"\n          GOBACK\n       END-IF.\n       \n      * * Authentication: Hash password\n       CALL \"HASH-PASSWORD\" USING WS-PASSWORD, WS-HASHED-PASSWORD.\n       \n      * * Authentication: Check user credentials\n       CALL \"VERIFY-USER\" USING WS-USERNAME, WS-HASHED-PASSWORD, \n                                WS-USER-DATA, WS-STATUS.\n       \n       IF SUCCESS\n      * * Session: Create user session\n          CALL \"CREATE-SESSION\" USING WS-USER-DATA, WS-SESSION-TOKEN\n          DISPLAY WS-SESSION-TOKEN\n       ELSE\n          DISPLAY \"Authentication failed\"\n       END-IF.\n       \n       GOBACK.\n       END PROGRAM LOGIN-USER.",
      "highlighted": "<span class=\"code-comment\">      * * Authentication: User login process</span>\n       <span class=\"code-keyword\">IDENTIFICATION DIVISION.</span>\n       <span class=\"code-keyword\">PROGRAM-ID.</span> LOGIN-USER.\n       <span class=\"code-keyword\">DATA DIVISION.</span>\n       <span class=\"code-keyword\">WORKING-STORAGE SECTION.</span>\n       01 WS-USERNAME <span class=\"code-keyword\">PIC X(20)</span>.\n       01 WS-PASSWORD <span class=\"code-keyword\">PIC X(20)</span>.\n       01 WS-HASHED-PASSWORD <span class=\"code-keyword\">PIC X(64)</span>.\n       01 WS-USER-DATA.\n          05 WS-USER-ID <span class=\"code-keyword\">PIC 9(10)</span>.\n          05 WS-USER-ROLE <span class=\"code-keyword\">PIC X(10)</span>.\n       01 WS-SESSION-TOKEN <span class=\"code-keyword\">PIC X(64)</span>.\n       01 WS-STATUS <span class=\"code-keyword\">PIC 9(2)</span>.\n          88 SUCCESS <span class=\"code-keyword\">VALUE</span> 0.\n          88 VALIDATION-ERROR <span class=\"code-keyword\">VALUE</span> 1.\n          88 AUTH-ERROR <span class=\"code-keyword\">VALUE</span> 2.\n       \n       <span class=\"code-keyword\">PROCEDURE DIVISION</span> USING WS-USERNAME WS-PASSWORD.\n      <span class=\"code-comment\">* Validate inputs</span>\n       <span class=\"code-keyword\">IF</span> WS-USERNAME = SPACES <span class=\"code-keyword\">OR</span> WS-PASSWORD = SPACES\n          <span class=\"code-keyword\">MOVE</span> 1 TO WS-STATUS\n          <span class=\"code-keyword\">DISPLAY</span> <span class=\"code-string\">\"Username and password are required\"</span>\n          <span class=\"code-keyword\">GOBACK</span>\n       <span class=\"code-keyword\">END-IF</span>.\n       \n      <span class=\"code-comment\">* * Authentication: Hash password</span>\n       <span class=\"code-keyword\">CALL</span> \"HASH-PASSWORD\" USING WS-PASSWORD, WS-HASHED-PASSWORD.\n       \n      <span class=\"code-comment\">* * Authentication: Check user credentials</span>\n       <span class=\"code-keyword\">CALL</span> \"VERIFY-USER\" USING WS-USERNAME, WS-HASHED-PASSWORD, \n                                WS-USER-DATA, WS-STATUS.\n       \n       <span class=\"code-keyword\">IF</span> SUCCESS\n      <span class=\"code-comment\">* * Session: Create user session</span>\n          <span class=\"code-keyword\">CALL</span> \"CREATE-SESSION\" USING WS-USER-DATA, WS-SESSION-TOKEN\n          <span class=\"code-keyword\">DISPLAY</span> WS-SESSION-TOKEN\n       <span class=\"code-keyword\">ELSE</span>\n          <span class=\"code-keyword\">DISPLAY</span> <span class=\"code-string\">\"Authentication failed\"</span>\n       <span class=\"code-keyword\">END-IF</span>.\n       \n       <span class=\"code-keyword\">GOBACK</span>.\n       <span class=\"code-keyword\">END PROGRAM</span> LOGIN-USER."
    },
    {
      "name": "Fortran",
      "code": "! * Authentication: User login process\nsubroutine login(username, password, session_token, status)\n  character(len=*), intent(in) :: username, password\n  character(len=64), intent(out) :: session_token\n  integer, intent(out) :: status\n  \n  character(len=64) :: hashed_password\n  type(user_data_type) :: user_data\n  \n  ! Validate inputs\n  if (len_trim(username) == 0 .or. len_trim(password) == 0) then\n    status = 1 ! Error\n    print *, \"Username and password are required\"\n    return\n  end if\n  \n  ! * Authentication: Hash password\n  call hash_password(password, hashed_password)\n  \n  ! * Authentication: Check user credentials\n  call verify_user(username, hashed_password, user_data, status)\n  \n  if (status == 0) then ! Success\n    ! * Session: Create user session\n    call create_session(user_data, session_token)\n    status = 0\n  else\n    print *, \"Authentication failed\"\n    status = 2 ! Authentication error\n  end if\n  \nend subroutine login",
      "highlighted": "<span class=\"code-comment\">! * Authentication: User login process</span>\n<span class=\"code-keyword\">subroutine</span> login(username, password, session_token, status)\n  <span class=\"code-keyword\">character(len=*), intent(in)</span> :: username, password\n  <span class=\"code-keyword\">character(len=64), intent(out)</span> :: session_token\n  <span class=\"code-keyword\">integer, intent(out)</span> :: status\n  \n  <span class=\"code-keyword\">character(len=64)</span> :: hashed_password\n  <span class=\"code-keyword\">type(user_data_type)</span> :: user_data\n  \n  <span class=\"code-comment\">! Validate inputs</span>\n  <span class=\"code-keyword\">if</span> (len_trim(username) == 0 .or. len_trim(password) == 0) <span class=\"code-keyword\">then</span>\n    status = 1 ! Error\n    <span class=\"code-keyword\">print *</span>, <span class=\"code-string\">\"Username and password are required\"</span>\n    <span class=\"code-keyword\">return</span>\n  <span class=\"code-keyword\">end if</span>\n  \n  <span class=\"code-comment\">! * Authentication: Hash password</span>\n  <span class=\"code-keyword\">call</span> hash_password(password, hashed_password)\n  \n  <span class=\"code-comment\">! * Authentication: Check user credentials</span>\n  <span class=\"code-keyword\">call</span> verify_user(username, hashed_password, user_data, status)\n  \n  <span class=\"code-keyword\">if</span> (status == 0) <span class=\"code-keyword\">then</span> ! Success\n    <span class=\"code-comment\">! * Session: Create user session</span>\n    <span class=\"code-keyword\">call</span> create_session(user_data, session_token)\n    status = 0\n  <span class=\"code-keyword\">else</span>\n    <span class=\"code-keyword\">print *</span>, <span class=\"code-string\">\"Authentication failed\"</span>\n    status = 2 ! Authentication error\n  <span class=\"code-keyword\">end if</span>\n  \n<span class=\"code-keyword\">end subroutine</span> login"
    }
  ]
}